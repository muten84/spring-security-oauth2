/**
 * Swagger Maven Plugin Sample
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AddressDetailMapRequest } from '../model/addressDetailMapRequest';
import { AddressDetailResponse } from '../model/addressDetailResponse';
import { DepartmentFilterDTO } from '../model/departmentFilterDTO';
import { LocalityFilterDTO } from '../model/localityFilterDTO';
import { MunicipalityFilterDTO } from '../model/municipalityFilterDTO';
import { ProvinceFilterByMunicipalityDTO } from '../model/provinceFilterByMunicipalityDTO';
import { ProvinceFilterDTO } from '../model/provinceFilterDTO';
import { StreetFilterDTO } from '../model/streetFilterDTO';
import { StreetSearchResultDTO } from '../model/streetSearchResultDTO';
import { Value } from '../model/value';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StreetMapServiceService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * searchDepartment
     * 
     * @param departmentFilterDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchDepartment(departmentFilterDTO?: DepartmentFilterDTO, observe?: 'body', reportProgress?: boolean): Observable<Array<Value>>;
    public searchDepartment(departmentFilterDTO?: DepartmentFilterDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Value>>>;
    public searchDepartment(departmentFilterDTO?: DepartmentFilterDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Value>>>;
    public searchDepartment(departmentFilterDTO?: DepartmentFilterDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<Value>>(`${this.basePath}/api/secure/rest/streetmap/searchDepartment`,
            departmentFilterDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchLocality
     * 
     * @param localityFilterDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchLocality(localityFilterDTO?: LocalityFilterDTO, observe?: 'body', reportProgress?: boolean): Observable<Array<Value>>;
    public searchLocality(localityFilterDTO?: LocalityFilterDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Value>>>;
    public searchLocality(localityFilterDTO?: LocalityFilterDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Value>>>;
    public searchLocality(localityFilterDTO?: LocalityFilterDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<Value>>(`${this.basePath}/api/secure/rest/streetmap/searchLocality`,
            localityFilterDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchMunicipality
     * 
     * @param municipalityFilterDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchMunicipality(municipalityFilterDTO?: MunicipalityFilterDTO, observe?: 'body', reportProgress?: boolean): Observable<Array<Value>>;
    public searchMunicipality(municipalityFilterDTO?: MunicipalityFilterDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Value>>>;
    public searchMunicipality(municipalityFilterDTO?: MunicipalityFilterDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Value>>>;
    public searchMunicipality(municipalityFilterDTO?: MunicipalityFilterDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<Value>>(`${this.basePath}/api/secure/rest/streetmap/searchMunicipality`,
            municipalityFilterDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchProvince
     * 
     * @param provinceName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchProvince(provinceName: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Value>>;
    public searchProvince(provinceName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Value>>>;
    public searchProvince(provinceName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Value>>>;
    public searchProvince(provinceName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (provinceName === null || provinceName === undefined) {
            throw new Error('Required parameter provinceName was null or undefined when calling searchProvince.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (provinceName !== undefined && provinceName !== null) {
            queryParameters = queryParameters.set('provinceName', <any>provinceName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<Array<Value>>(`${this.basePath}/api/secure/rest/streetmap/searchProvince/${encodeURIComponent(String(provinceName))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchProvinceByFilter
     * 
     * @param provinceFilterDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchProvinceByFilter(provinceFilterDTO?: ProvinceFilterDTO, observe?: 'body', reportProgress?: boolean): Observable<Array<Value>>;
    public searchProvinceByFilter(provinceFilterDTO?: ProvinceFilterDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Value>>>;
    public searchProvinceByFilter(provinceFilterDTO?: ProvinceFilterDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Value>>>;
    public searchProvinceByFilter(provinceFilterDTO?: ProvinceFilterDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<Value>>(`${this.basePath}/api/secure/rest/streetmap/searchProvince`,
            provinceFilterDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchProvinceByMunicipalityName
     * 
     * @param provinceFilterByMunicipalityDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchProvinceByMunicipalityName(provinceFilterByMunicipalityDTO?: ProvinceFilterByMunicipalityDTO, observe?: 'body', reportProgress?: boolean): Observable<Array<Value>>;
    public searchProvinceByMunicipalityName(provinceFilterByMunicipalityDTO?: ProvinceFilterByMunicipalityDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Value>>>;
    public searchProvinceByMunicipalityName(provinceFilterByMunicipalityDTO?: ProvinceFilterByMunicipalityDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Value>>>;
    public searchProvinceByMunicipalityName(provinceFilterByMunicipalityDTO?: ProvinceFilterByMunicipalityDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<Value>>(`${this.basePath}/api/secure/rest/streetmap/searchProvinceByMunicipalityName`,
            provinceFilterByMunicipalityDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchStreet
     * Permette di cercare le strade per nome in like
     * @param streetFilterDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchStreet(streetFilterDTO?: StreetFilterDTO, observe?: 'body', reportProgress?: boolean): Observable<Array<StreetSearchResultDTO>>;
    public searchStreet(streetFilterDTO?: StreetFilterDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StreetSearchResultDTO>>>;
    public searchStreet(streetFilterDTO?: StreetFilterDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StreetSearchResultDTO>>>;
    public searchStreet(streetFilterDTO?: StreetFilterDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<StreetSearchResultDTO>>(`${this.basePath}/api/secure/rest/streetmap/searchStreet`,
            streetFilterDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * showBookingAddressDetail
     * 
     * @param addressDetailMapRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public showBookingAddressDetail(addressDetailMapRequest?: AddressDetailMapRequest, observe?: 'body', reportProgress?: boolean): Observable<AddressDetailResponse>;
    public showBookingAddressDetail(addressDetailMapRequest?: AddressDetailMapRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AddressDetailResponse>>;
    public showBookingAddressDetail(addressDetailMapRequest?: AddressDetailMapRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AddressDetailResponse>>;
    public showBookingAddressDetail(addressDetailMapRequest?: AddressDetailMapRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<AddressDetailResponse>(`${this.basePath}/api/secure/rest/streetmap/showBookingAddressDetail`,
            addressDetailMapRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
