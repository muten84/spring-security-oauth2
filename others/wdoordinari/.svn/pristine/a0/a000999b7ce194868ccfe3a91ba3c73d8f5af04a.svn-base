/**
 * Swagger Maven Plugin Sample
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CiclicalDaysInfoFilterDTO } from '../model/ciclicalDaysInfoFilterDTO';
import { CiclicalFullDTO } from '../model/ciclicalFullDTO';
import { CiclicalRequestDTO } from '../model/ciclicalRequestDTO';
import { CiclicalResultDTO } from '../model/ciclicalResultDTO';
import { ErrorMessage } from '../model/errorMessage';
import { GenericMessageDTO } from '../model/genericMessageDTO';
import { GenericResultDTO } from '../model/genericResultDTO';
import { OverviewCiclicalFilterDTO } from '../model/overviewCiclicalFilterDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CiclicalModuleServiceService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * addCiclicalDaysInfo
     * Aggiunge un giorno alla ciclica
     * @param ciclicalRequestDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addCiclicalDaysInfo(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<CiclicalFullDTO>;
    public addCiclicalDaysInfo(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CiclicalFullDTO>>;
    public addCiclicalDaysInfo(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CiclicalFullDTO>>;
    public addCiclicalDaysInfo(ciclicalRequestDTO?: CiclicalRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CiclicalFullDTO>(`${this.basePath}/api/secure/rest/ciclical/addCiclicalDaysInfo`,
            ciclicalRequestDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * checkNewCiclicalInterval
     * Controlla il nuovo intervallo di date della prenotazione ciclica
     * @param ciclicalRequestDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public checkNewCiclicalInterval(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<CiclicalResultDTO>;
    public checkNewCiclicalInterval(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CiclicalResultDTO>>;
    public checkNewCiclicalInterval(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CiclicalResultDTO>>;
    public checkNewCiclicalInterval(ciclicalRequestDTO?: CiclicalRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CiclicalResultDTO>(`${this.basePath}/api/secure/rest/ciclical/checkNewCiclicalInterval`,
            ciclicalRequestDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * checkSuspendCiclical
     * Controlla se la ciclica puï¿½ essere sospesa
     * @param ciclicalRequestDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public checkSuspendCiclical(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<CiclicalResultDTO>;
    public checkSuspendCiclical(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CiclicalResultDTO>>;
    public checkSuspendCiclical(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CiclicalResultDTO>>;
    public checkSuspendCiclical(ciclicalRequestDTO?: CiclicalRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CiclicalResultDTO>(`${this.basePath}/api/secure/rest/ciclical/checkSuspendCiclical`,
            ciclicalRequestDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * filterTransports
     * 
     * @param overviewCiclicalFilterDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public ciclicals(overviewCiclicalFilterDTO?: OverviewCiclicalFilterDTO, observe?: 'body', reportProgress?: boolean): Observable<GenericResultDTO>;
    public ciclicals(overviewCiclicalFilterDTO?: OverviewCiclicalFilterDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResultDTO>>;
    public ciclicals(overviewCiclicalFilterDTO?: OverviewCiclicalFilterDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResultDTO>>;
    public ciclicals(overviewCiclicalFilterDTO?: OverviewCiclicalFilterDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<GenericResultDTO>(`${this.basePath}/api/secure/rest/ciclical/ciclicals`,
            overviewCiclicalFilterDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCiclical
     * Recupera i dati della prenotazione ciclica
     * @param ciclicalRequestDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCiclical(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<CiclicalFullDTO>;
    public getCiclical(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CiclicalFullDTO>>;
    public getCiclical(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CiclicalFullDTO>>;
    public getCiclical(ciclicalRequestDTO?: CiclicalRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CiclicalFullDTO>(`${this.basePath}/api/secure/rest/ciclical/getCiclical`,
            ciclicalRequestDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCiclicalDaysInfos
     * Recupera le info di uno specifico giorno della prenotazione ciclica
     * @param ciclicalDaysInfoFilterDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCiclicalDaysInfos(ciclicalDaysInfoFilterDTO?: CiclicalDaysInfoFilterDTO, observe?: 'body', reportProgress?: boolean): Observable<Array<CiclicalDaysInfoFilterDTO>>;
    public getCiclicalDaysInfos(ciclicalDaysInfoFilterDTO?: CiclicalDaysInfoFilterDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CiclicalDaysInfoFilterDTO>>>;
    public getCiclicalDaysInfos(ciclicalDaysInfoFilterDTO?: CiclicalDaysInfoFilterDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CiclicalDaysInfoFilterDTO>>>;
    public getCiclicalDaysInfos(ciclicalDaysInfoFilterDTO?: CiclicalDaysInfoFilterDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<CiclicalDaysInfoFilterDTO>>(`${this.basePath}/api/secure/rest/ciclical/getCiclicalDaysInfos`,
            ciclicalDaysInfoFilterDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCiclicalPeriod
     * Recupera i dati strutturali della prenotazione ciclica
     * @param ciclicalRequestDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCiclicalPeriod(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<CiclicalRequestDTO>;
    public getCiclicalPeriod(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CiclicalRequestDTO>>;
    public getCiclicalPeriod(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CiclicalRequestDTO>>;
    public getCiclicalPeriod(ciclicalRequestDTO?: CiclicalRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CiclicalRequestDTO>(`${this.basePath}/api/secure/rest/ciclical/getCiclicalPeriod`,
            ciclicalRequestDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * makeBookingCiclical
     * Rende una prenotazione ciclica
     * @param ciclicalRequestDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public makeBookingCiclical(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<CiclicalResultDTO>;
    public makeBookingCiclical(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CiclicalResultDTO>>;
    public makeBookingCiclical(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CiclicalResultDTO>>;
    public makeBookingCiclical(ciclicalRequestDTO?: CiclicalRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CiclicalResultDTO>(`${this.basePath}/api/secure/rest/ciclical/makeBookingCiclical`,
            ciclicalRequestDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * modifyCiclicalDaysInfo
     * Modifica i giorni della prenotazione ciclica
     * @param ciclicalRequestDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modifyCiclicalDaysInfo(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<CiclicalFullDTO>;
    public modifyCiclicalDaysInfo(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CiclicalFullDTO>>;
    public modifyCiclicalDaysInfo(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CiclicalFullDTO>>;
    public modifyCiclicalDaysInfo(ciclicalRequestDTO?: CiclicalRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CiclicalFullDTO>(`${this.basePath}/api/secure/rest/ciclical/modifyCiclicalDaysInfo`,
            ciclicalRequestDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * modifyCiclicalPeriod
     * Modifica i dati strutturali della prenotazione ciclica
     * @param ciclicalRequestDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modifyCiclicalPeriod(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<CiclicalResultDTO>;
    public modifyCiclicalPeriod(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CiclicalResultDTO>>;
    public modifyCiclicalPeriod(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CiclicalResultDTO>>;
    public modifyCiclicalPeriod(ciclicalRequestDTO?: CiclicalRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CiclicalResultDTO>(`${this.basePath}/api/secure/rest/ciclical/modifyCiclicalPeriod`,
            ciclicalRequestDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * removeCiclical
     * Cancella una prenotazione ciclica
     * @param ciclicalRequestDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeCiclical(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<CiclicalResultDTO>;
    public removeCiclical(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CiclicalResultDTO>>;
    public removeCiclical(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CiclicalResultDTO>>;
    public removeCiclical(ciclicalRequestDTO?: CiclicalRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CiclicalResultDTO>(`${this.basePath}/api/secure/rest/ciclical/removeCiclical`,
            ciclicalRequestDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * suspendResumeCiclical
     * Sospende o ripristina una prenotazione ciclica
     * @param ciclicalRequestDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public suspendResumeCiclical(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<CiclicalResultDTO>;
    public suspendResumeCiclical(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CiclicalResultDTO>>;
    public suspendResumeCiclical(ciclicalRequestDTO?: CiclicalRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CiclicalResultDTO>>;
    public suspendResumeCiclical(ciclicalRequestDTO?: CiclicalRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CiclicalResultDTO>(`${this.basePath}/api/secure/rest/ciclical/suspendResumeCiclical`,
            ciclicalRequestDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
