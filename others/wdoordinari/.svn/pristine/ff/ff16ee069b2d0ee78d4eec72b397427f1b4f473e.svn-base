/**
 * Swagger Maven Plugin Sample
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Department } from '../model/department';
import { DepartmentFilter } from '../model/departmentFilter';
import { FullTextResult } from '../model/fullTextResult';
import { Value } from '../model/value';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CoreLayerModuleServiceService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * departmentByCenterCostList
     * 
     * @param centerCost 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public departmentByCenterCostList(centerCost: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Department>>;
    public departmentByCenterCostList(centerCost: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Department>>>;
    public departmentByCenterCostList(centerCost: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Department>>>;
    public departmentByCenterCostList(centerCost: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (centerCost === null || centerCost === undefined) {
            throw new Error('Required parameter centerCost was null or undefined when calling departmentByCenterCostList.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Department>>(`${this.basePath}/api/secure/rest/staticdata/department/${encodeURIComponent(String(centerCost))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * departmentByFilter
     * 
     * @param departmentFilter 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public departmentByFilter(departmentFilter?: DepartmentFilter, observe?: 'body', reportProgress?: boolean): Observable<Array<Department>>;
    public departmentByFilter(departmentFilter?: DepartmentFilter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Department>>>;
    public departmentByFilter(departmentFilter?: DepartmentFilter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Department>>>;
    public departmentByFilter(departmentFilter?: DepartmentFilter, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<Department>>(`${this.basePath}/api/secure/rest/staticdata/departmentByFilter`,
            departmentFilter,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getDepartmentById
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public departmentById(id: string, observe?: 'body', reportProgress?: boolean): Observable<Department>;
    public departmentById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Department>>;
    public departmentById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Department>>;
    public departmentById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling departmentById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Department>(`${this.basePath}/api/secure/rest/staticdata/getDepartmentById/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * departmentByPhoneList
     * 
     * @param phone 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public departmentByPhoneList(phone: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Department>>;
    public departmentByPhoneList(phone: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Department>>>;
    public departmentByPhoneList(phone: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Department>>>;
    public departmentByPhoneList(phone: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (phone === null || phone === undefined) {
            throw new Error('Required parameter phone was null or undefined when calling departmentByPhoneList.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Department>>(`${this.basePath}/api/secure/rest/staticdata/department/${encodeURIComponent(String(phone))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * departmentValuesByFilter
     * 
     * @param departmentFilter 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public departmentValuesByFilter(departmentFilter?: DepartmentFilter, observe?: 'body', reportProgress?: boolean): Observable<Array<Value>>;
    public departmentValuesByFilter(departmentFilter?: DepartmentFilter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Value>>>;
    public departmentValuesByFilter(departmentFilter?: DepartmentFilter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Value>>>;
    public departmentValuesByFilter(departmentFilter?: DepartmentFilter, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<Value>>(`${this.basePath}/api/secure/rest/staticdata/departmentValuesByFilter`,
            departmentFilter,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAll118Configurations
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAll118Configurations(observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: Value; }>;
    public getAll118Configurations(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: Value; }>>;
    public getAll118Configurations(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: Value; }>>;
    public getAll118Configurations(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<{ [key: string]: Value; }>(`${this.basePath}/api/secure/rest/staticdata/getAll118Configurations/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllTSConfigurations
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllTSConfigurations(observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: Value; }>;
    public getAllTSConfigurations(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: Value; }>>;
    public getAllTSConfigurations(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: Value; }>>;
    public getAllTSConfigurations(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<{ [key: string]: Value; }>(`${this.basePath}/api/secure/rest/staticdata/getAllTSConfigurations/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAuthorityByType
     * 
     * @param type 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAuthorityByType(type: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Value>>;
    public getAuthorityByType(type: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Value>>>;
    public getAuthorityByType(type: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Value>>>;
    public getAuthorityByType(type: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getAuthorityByType.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Value>>(`${this.basePath}/api/secure/rest/staticdata/authorityByType/${encodeURIComponent(String(type))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAuthorityCompact
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAuthorityCompact(observe?: 'body', reportProgress?: boolean): Observable<Array<Value>>;
    public getAuthorityCompact(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Value>>>;
    public getAuthorityCompact(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Value>>>;
    public getAuthorityCompact(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<Array<Value>>(`${this.basePath}/api/secure/rest/staticdata/authorityCompact`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * loadStaticData
     * 
     * @param staticDataCode 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loadStaticData(staticDataCode: 'ATTREZZATURA' | 'ACCOMPAGNATO' | 'DEAMBULAZIONE' | 'TIPO' | 'PHASE' | 'PRIORITY' | 'CONVENTION' | 'AUTHORITY_TYPE' | 'SERVICE_STATUS' | 'BOOKING_STATUS' | 'DELETE_REASON' | 'CONFIG_FE' | 'POSTAZIONE_ARRIVO' | 'DEALLOCATE_REASON', observe?: 'body', reportProgress?: boolean): Observable<Array<Value>>;
    public loadStaticData(staticDataCode: 'ATTREZZATURA' | 'ACCOMPAGNATO' | 'DEAMBULAZIONE' | 'TIPO' | 'PHASE' | 'PRIORITY' | 'CONVENTION' | 'AUTHORITY_TYPE' | 'SERVICE_STATUS' | 'BOOKING_STATUS' | 'DELETE_REASON' | 'CONFIG_FE' | 'POSTAZIONE_ARRIVO' | 'DEALLOCATE_REASON', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Value>>>;
    public loadStaticData(staticDataCode: 'ATTREZZATURA' | 'ACCOMPAGNATO' | 'DEAMBULAZIONE' | 'TIPO' | 'PHASE' | 'PRIORITY' | 'CONVENTION' | 'AUTHORITY_TYPE' | 'SERVICE_STATUS' | 'BOOKING_STATUS' | 'DELETE_REASON' | 'CONFIG_FE' | 'POSTAZIONE_ARRIVO' | 'DEALLOCATE_REASON', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Value>>>;
    public loadStaticData(staticDataCode: 'ATTREZZATURA' | 'ACCOMPAGNATO' | 'DEAMBULAZIONE' | 'TIPO' | 'PHASE' | 'PRIORITY' | 'CONVENTION' | 'AUTHORITY_TYPE' | 'SERVICE_STATUS' | 'BOOKING_STATUS' | 'DELETE_REASON' | 'CONFIG_FE' | 'POSTAZIONE_ARRIVO' | 'DEALLOCATE_REASON', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (staticDataCode === null || staticDataCode === undefined) {
            throw new Error('Required parameter staticDataCode was null or undefined when calling loadStaticData.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Value>>(`${this.basePath}/api/secure/rest/staticdata/loadStaticData/${encodeURIComponent(String(staticDataCode))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * loadStaticData
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loadStaticData_1(observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: Array<Value>; }>;
    public loadStaticData_1(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: Array<Value>; }>>;
    public loadStaticData_1(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: Array<Value>; }>>;
    public loadStaticData_1(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<{ [key: string]: Array<Value>; }>(`${this.basePath}/api/secure/rest/staticdata/staticData`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * rebuiltFullText
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rebuiltFullText(observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public rebuiltFullText(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public rebuiltFullText(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public rebuiltFullText(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<boolean>(`${this.basePath}/api/secure/rest/staticdata/rebuiltFullText`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchFullText
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchFullText(body?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<FullTextResult>>;
    public searchFullText(body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<FullTextResult>>>;
    public searchFullText(body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<FullTextResult>>>;
    public searchFullText(body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<FullTextResult>>(`${this.basePath}/api/secure/rest/staticdata/searchFullText`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
