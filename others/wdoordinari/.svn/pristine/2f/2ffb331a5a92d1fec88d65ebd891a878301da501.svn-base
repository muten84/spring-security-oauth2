/**
 * Swagger Maven Plugin Sample
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StormoModuleServiceApi {

    protected basePath = 'http://localhost';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Permette di inviare una richiesta di cancellazione di una attivazione verso la risorsa
     * @summary cleanActivation
     * @param body 
     */
    public cleanActivation(body?: models.SendActivationReq, extraHttpRequestParams?: any): Observable<models.AcknowledgeResp> {
        return this.cleanActivationWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Permette di testare la presenza di una risorsa mobile
     * @summary testMobile
     * @param sessionId 
     */
    public resetMobile(sessionId: string, extraHttpRequestParams?: any): Observable<models.AcknowledgeResp> {
        return this.resetMobileWithHttpInfo(sessionId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Permette di inviare una richiesta di attivazione verso la risorsa
     * @summary sendActivation
     * @param body 
     */
    public sendActivation(body?: models.SendActivationReq, extraHttpRequestParams?: any): Observable<models.AcknowledgeResp> {
        return this.sendActivationWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Permette di testare la presenza di una risorsa mobile
     * @summary testMobile
     * @param sessionId 
     */
    public testMobile(sessionId: string, extraHttpRequestParams?: any): Observable<models.AcknowledgeResp> {
        return this.testMobileWithHttpInfo(sessionId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Permette di aggiornare una richiesta di attivazione verso la risorsa mobile
     * @summary sendActivation
     * @param body 
     */
    public updateActivation(body?: models.SendUpdateActivationReq, extraHttpRequestParams?: any): Observable<models.AcknowledgeResp> {
        return this.updateActivationWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * cleanActivation
     * Permette di inviare una richiesta di cancellazione di una attivazione verso la risorsa
     * @param body 
     */
    public cleanActivationWithHttpInfo(body?: models.SendActivationReq, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/stormo/cleanActivation';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * testMobile
     * Permette di testare la presenza di una risorsa mobile
     * @param sessionId 
     */
    public resetMobileWithHttpInfo(sessionId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/stormo/resetMobile';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sessionId' is not null or undefined
        if (sessionId === null || sessionId === undefined) {
            throw new Error('Required parameter sessionId was null or undefined when calling resetMobile.');
        }
        if (sessionId !== undefined) {
            queryParameters.set('sessionId', <any>sessionId);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * sendActivation
     * Permette di inviare una richiesta di attivazione verso la risorsa
     * @param body 
     */
    public sendActivationWithHttpInfo(body?: models.SendActivationReq, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/stormo/sendActivation';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * testMobile
     * Permette di testare la presenza di una risorsa mobile
     * @param sessionId 
     */
    public testMobileWithHttpInfo(sessionId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/stormo/testMobile';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sessionId' is not null or undefined
        if (sessionId === null || sessionId === undefined) {
            throw new Error('Required parameter sessionId was null or undefined when calling testMobile.');
        }
        if (sessionId !== undefined) {
            queryParameters.set('sessionId', <any>sessionId);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * sendActivation
     * Permette di aggiornare una richiesta di attivazione verso la risorsa mobile
     * @param body 
     */
    public updateActivationWithHttpInfo(body?: models.SendUpdateActivationReq, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/stormo/updateActivation';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
