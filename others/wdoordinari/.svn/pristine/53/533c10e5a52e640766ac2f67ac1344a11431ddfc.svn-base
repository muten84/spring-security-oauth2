import { TemplateRef, ViewContainerRef, ContentChild, ViewChild, Component, OnInit, Input, EventEmitter, AfterViewInit } from '@angular/core';
import { FormsModule, ReactiveFormsModule, FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { MenuItem, UserInfo, RightSideItem } from '../core/core.module'
import { Location } from '@angular/common';
import { CommonHeaderComponent } from '../common-header/common-header.component'
/*import { SinotticoPrenotazioniTableComponent } from '../sinottico-prenotazioni/sinottico-prenotazioni-table.component';*/
import { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';
import { BookingModuleServiceApi, AAAControllerApi } from '../../services/services.module';
import { BlockUI, NgBlockUI } from 'ng-block-ui';
import { StaticDataService } from '../static-data/cached-static-data';
import { AuthService } from '../service/auth.service';
import { MessageService } from '../service/message.service';
import { Observable } from 'rxjs/Observable';
import { ComponentHolderService } from '../service/shared-service';
import { ToastsManager } from 'ng2-toastr/ng2-toastr';
import { NgbModal, ModalDismissReasons } from '@ng-bootstrap/ng-bootstrap';
import { cleanMessageList } from '../util/error-util';
import { BrowserCommunicationService } from 'common/services/browser-communication.service';
import { environment } from 'environments/environment';
import { NavigateMessage, Message, Type } from 'common/services/messages';
import { NgbModalOptions } from '@ng-bootstrap/ng-bootstrap/modal/modal';


@Component({
    moduleId: module.id.toString(),
    selector: 'app-root',
    templateUrl: './root.component.html',
    styleUrls: ['./root.component.css']
})
export class RootComponent implements OnInit, AfterViewInit {

    @BlockUI() blockUI: NgBlockUI;

    private items: Array<MenuItem>;

    private handle;

    userInfo: UserInfo = { name: '', role: '' };

    private maskCounter = 0;

    public collapseMenu: EventEmitter<any> = new EventEmitter();

    @ViewChild('rootModal')
    rootModal: TemplateRef<any>


    @ViewChild('rootConfirmModal')
    rootConfirmModal: TemplateRef<any>


    rootModalTitle: string;
    rootModalBody: string;
    rootModalHints: string[];

    /*@ViewChild('bookingSearch') bookingSearch: RicercaPrenotazioniTableComponent;*/
    /*@ContentChild('tabellaPrenotazioni') bookingSearch: SinotticoPrenotazioniTableComponent;*/


    constructor(
        private messageService: MessageService,
        private authServ: AuthService,
        private staticDataService: StaticDataService,
        private router: Router,
        private location: Location,
        private bookingService: BookingModuleServiceApi,
        private userService: AAAControllerApi,
        private compService: ComponentHolderService,
        public toastr: ToastsManager,
        vcr: ViewContainerRef,
        private modalService: NgbModal,
        private bcs: BrowserCommunicationService
    ) {
        this.toastr.setRootViewContainerRef(vcr);
        this.items = [

            {
                sectionId: 'menu1', name: 'Prenotazioni', path: '/sinottico-prenotazioni', icon: '', iClass: 'fa fa-book', childItems: [
                    { name: 'Nuova Prenotazione', path: '/gestione-prenotazioni' },
                    { name: 'Ricerca Avanzata', path: '/ricerca-avanzata-prenotazioni' }
                ]
            },
            { sectionId: 'menu4', name: 'Ritorni', path: '/coda-ritorni', icon: '', iClass: 'fa fa-arrow-left', childItems: [] },
            {
                sectionId: 'menu2', name: 'Servizi', path: '/sinottico-servizi', icon: '', iClass: 'fa fa-tasks', childItems: [
                    /* { name: 'Associazione e Gestione', path: '/gestione-servizi' },*/
                ]
            },
            { sectionId: 'menu4', name: 'Cicliche', path: '/sinottico-cicliche', icon: '', iClass: 'fa fa-repeat', childItems: [] },
            { sectionId: 'menu3', name: 'Turni', path: '/sinottico-turni', icon: '', iClass: 'fa fa-calendar', childItems: [] }, 

        ];
    }

    public getRootComponent() {
        return RootComponent;
    }

    ngAfterViewInit(): void {
        this.compService.setRootComponent(this);
    }


    ngOnInit() {
        /*  let b = false;
          window.onbeforeunload = function (e) {
              if (b) return;
              setTimeout(function () {
                  b = true;
                  window.location.replace("/ordinari-web/home");
              }, 1);
              var dialogText = 'Dialog text here';
              e.returnValue = dialogText;
              return dialogText;
  
          };*/
        this.compService.setRootComponent(this);

        let token = sessionStorage.getItem('currentToken');
        if (!token) {
            // this.router.navigate(['/login']);
            return;
        }

        setTimeout(() => { this.updateUser() }, 5000);

        setTimeout(() => {
            this.handle = setInterval(this.updateUser(), 30000);
        }, 60000);

        // console.log('Caricamento dati statici...');
        this.blockUI.start();
        /*   this.staticDataService.loadStaticData().subscribe((res) => {
             //console.log("Received static data list" + res)
             this.router.navigate(["/sinottico-prenotazioni"]);
             this.blockUI.stop();
           });*/
        this.staticDataService.getStaticDataByType('ATTREZZATURA').subscribe((list) => {
            // console.log('ATTREZZATURA LIST IS ' + list);

            this.router.navigate(['/sinottico-prenotazioni']);
            // this.blockUI.stop();
        }
        );
        this.messageService.start('/user/topic/messages', true);
        this.messageService.subscribe('MessageDTO').observ$.subscribe((msg) => {
            // console.log('received message from topic ' + msg.topic);
        });



        const ls2 = (ev: Message) => {
            // se arriva un messaggio di navigate prendo il path e i parametri dal messaggio
            let ms: NavigateMessage = <any>ev;

            let array = [];
            array[0] = ms.path;
            if (ms.parameters && ms.parameters.length > 0) {
                array.push(...ms.parameters);
            }
			// piccolo workaround dovuto a una mancanza del router della versione 4 di angular.
            this.router.navigate(['/blank']).then(v => {

                this.router.navigate(array);

            });

        };


        this.bcs.addEventListener(Type.navigate, ls2);
    }

    collapse(event: boolean) {
        //        console.log('menu collapsed ' + collapse);
        this.collapseMenu.emit(event);
    }

    public updateUser(): void {
        // //console.log('checking authentication');
        let observResp = this.userService.getCurrentUser();
        observResp.catch((err: any) => {
            // console.log('error on checking authentication: ' + err);
            return Observable.throw(err);
        });

        observResp.subscribe((res) => {
            //  //console.log('current user is: ' + res);
            if (res && res.enabled) {
                // console.log('user is ok:' + res.username);

                this.userInfo = {
                    name: res.username,
                    role: ''
                };

            }
        }, (err) => {
            // console.log('error on checking authentication: ' + err);
            clearInterval(this.handle);
            // window.alert('Problema di sicurezza in fase di verifica autenticazione');
            // this.router.navigate(['/login']);
        });
    }

    public getRightSideItems(): RightSideItem[] {
        return [
            {
                icon: 'fa-book',
                name: 'synoptic-prenotazioni',
                tooltip: "Lista Prenotazioni"
            },
            {
                icon: 'fa-tasks',
                name: 'synoptic-servizi',
                tooltip: "Lista Servizi"
            },
            {
                icon: 'fa-ambulance',
                name: 'synoptic-mezzi',
                tooltip: "Lista Mezzi Attivi"
            },
            {
                icon: 'fa-refresh',
                name: 'refresh',
                tooltip: "Aggiorna configurazioni locali"
            },
            {
                icon: 'fa-reply',
                name: 'back',
                tooltip: "Ritorna alla pagina precedente"
            },
            {
                icon: 'fa-power-off',
                name: 'logout',
                tooltip: "Esci dall'applicativo"
            }
        ]
    }

    public mask() {
        //        this.maskCounter++;
        this.blockUI.start();
    }

    public unmask() {
        //        this.maskCounter--;
        //        if ( this.maskCounter === 0 ) {
        this.blockUI.stop();
        //        }
    }

    public onRightItemClick(itemName: string) {
        // console.log('onRightItemClick: ' + itemName);
        switch (itemName) {
            case 'synoptic-prenotazioni': {
                this.bcs.openChildren(environment.synURL, "prenotazioni", 600, 600);
                break;
            } case 'synoptic-servizi': {
                this.bcs.openChildren(environment.synURL, "servizi", 600, 600);
                break;
            } case 'synoptic-mezzi': {
                this.bcs.openChildren(environment.synURL, "mezzi", 600, 600);
                break;
            } case 'refresh': {
                this.staticDataService.reloadStaticData().subscribe((res) => window.location.reload());
                // this.showAlert();
                break;
            } case 'back': {
                this.goBack();
                break;
            } case 'logout': {
                /*localStorage.removeItem("currentUser");*/



                // console.log('invoking logout')
                this.showConfirmDialog("Attenzione", "Si vuole davvero effettuare il logout dall'applicativo?").then((result) => {
                    //this.closeResult = `Closed with: ${result}`;
                    console.log("logout confirm is" + result);
                    this.blockUI.start();
                    this.authServ.logout().subscribe(
                        (data) => {
                            if (data.status === 200) {
                                // console.log('Received response data on logout: ' + data.text);                                
                                // sessionStorage.removeItem('currentToken');
                                this.router.navigate(['/login']);
                                this.blockUI.stop();
                            }

                        }, err => {
                            this.blockUI.stop();
                            sessionStorage.clear();
                            this.router.navigate(['/login']);

                            // console.log('Error on logout: ' + err)
                        }
                    );
                }, (reason) => {

                    console.log("logout disimss is:" + this.getDismissReason(reason));
                });

                /*this.router.navigate(['/login']);*/
                break;
            }
        }
    }

    public goBack(): void {
        this.location.back();
    }

    onSearchAvailable(event: any) {
        // console.log('onSearchAvailable: ' + event);
        // console.log('booking search el is: ' + this.bookingSearch.searchBookings());
    }

    public showConfirmDialog(title: string, message: string, options?: NgbModalOptions) {
        this.rootModalTitle = title;
        this.rootModalBody = message;

        if(options) {
            if(!options.keyboard) {
                options.keyboard = false;
            }
        } else {
            options = { keyboard: false }
        }

        let p = this.modalService.open(this.rootConfirmModal, options).result;
        return p;
    }
    

    public showModal(title: string, message: any): Promise<any> {
        this.rootModalTitle = title;
        this.rootModalHints = [];
        if (Array.isArray(message)) {
            this.rootModalHints = cleanMessageList(message);
        }
        else {
            this.rootModalBody = message;
        }


        /* let p: Promise<any> = new Promise((resolve, reject) => {
         
     });*/
        let p = this.modalService.open(this.rootModal, {
            keyboard: false,
        }).result;
        /*.then((result) => {
            //this.closeResult = `Closed with: ${result}`;
            console.log("showModal result: " + result);
            
        }, (reason) => {
            
            console.log("showModal disimss: " + this.getDismissReason(reason));
        });*/
        return p;
    }

    public redirectToLogin(title, message) {
        this.showModal(title, message).then((result) => {
            //this.closeResult = `Closed with: ${result}`;
            console.log("showModal result: " + result);
            location.reload();
        }, (reason) => {
            location.reload();
            console.log("showModal disimss: " + this.getDismissReason(reason));
        });


    }

    private getDismissReason(reason: any): string {
        if (reason === ModalDismissReasons.ESC) {
            return 'by pressing ESC';
        } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {
            return 'by clicking on a backdrop';
        } else {
            return `with: ${reason}`;
        }
        //  return "";
    }

    public showToastMessage(type, message) {
        switch (type) {
            case 'error': {
                this.toastr.error(message, 'Errore', { enableHTML: true, showCloseButton: true, positionClass: 'toast-bottom-right' });
                return;
            }
            case 'warning': {
                this.toastr.warning(message, 'Attenzione', { enableHTML: true, showCloseButton: true, positionClass: 'toast-bottom-right' });
                return;
            }
            case 'success': {
                this.toastr.success(message, '', { showCloseButton: true, positionClass: 'toast-bottom-right' });
                return;
            }
            default:
                console.log('unknown type of toast to process')
        }
        return;

    }

}
