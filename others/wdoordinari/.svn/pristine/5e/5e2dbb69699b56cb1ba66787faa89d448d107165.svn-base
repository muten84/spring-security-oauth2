import { SinotticoPrenotazioniComponent } from "app/sinottico-prenotazioni/sinottico-prenotazioni.component";
import { StaticDataService } from "app/static-data/cached-static-data";
import { NgbModal } from "@ng-bootstrap/ng-bootstrap";
import { Component } from "@angular/core";
import { DomSanitizer } from "@angular/platform-browser";
import { ContextMenuService } from "ngx-contextmenu";
import { Router } from "@angular/router";
import { MessageService } from "app/service/message.service";
import { ComponentHolderService } from "app/service/shared-service";
import { TransportModuleServiceApi, BookingModuleServiceApi, ChargeServiceApi } from "services/gen/api/api";
import { BrowserCommunicationService } from "common/services/browser-communication.service";
import { NavigateMessage, RequestMessage, AddBookingToServiceMessage, SelectServiceInSinottico, Type, Message } from "common/services/messages";
import { OnInit, OnDestroy } from "@angular/core/src/metadata/lifecycle_hooks";
import { MenuItemValue, OverviewBookingDTO } from "services/services.module";
import { environment } from 'environments/environment';

@Component({
    selector: 'sinottico-prenotazioni',
    templateUrl: '../../app/sinottico-prenotazioni/sinottico-prenotazioni.html',
    styleUrls: ['../../app/sinottico-prenotazioni/sinottico-prenotazioni.scss']

})
export class SinotticoPrenotazioniExComponent extends SinotticoPrenotazioniComponent implements OnInit, OnDestroy {

    currentServiceCode: string;
    currentServiceId: string;
    lsSetCurr: (ev: Message) => void;
    lsRemBook: (ev: Message) => void;


    synopticModule: boolean;

    constructor(sdSvc: StaticDataService,
        modalService: NgbModal,
        chargeService: ChargeServiceApi,
        sanitizer: DomSanitizer,
        contextMenuService: ContextMenuService,
        router: Router,
        messageService: MessageService,
        componentService: ComponentHolderService,
        private componentService_ex: ComponentHolderService,
        transportService: TransportModuleServiceApi,
        bookingService: BookingModuleServiceApi,
        bcs: BrowserCommunicationService) {

        super(sdSvc,
            modalService,
            chargeService,
            sanitizer,
            contextMenuService,
            router,
            messageService,
            componentService,
            transportService,
            bookingService,
            bcs);
    }

    ngOnInit() {
        super.ngOnInit();
        this.synopticModule = true;
        this.lsSetCurr = (ev: Message) => {
            let data: SelectServiceInSinottico = <any>ev;
            this.currentServiceCode = data.serviceCode;
            this.currentServiceId = data.serviceId;

            if (this.rows && this.rows.length > 0) {
                this.rows.forEach(e => {
                    e.optionItems = this.buildRowMenu(e.popupMenu, e.source);
                });
            }

        }

        this.lsRemBook = (ev: Message) => {
            let data: AddBookingToServiceMessage = <any>ev;

            if (data && data.bookingId) {
                let list: OverviewBookingDTO[] = [];
                for (let idx = 0; idx < this.rows.length; idx++) {
                    let row: OverviewBookingDTO = this.rows[idx];
                    if (row.id !== data.bookingId) {
                        list.push(row);
                    }
                }
                this.rows = list;
            }
            this.componentService_ex.getRootComponent().unmask();
        };

        this.bcs.addEventListener(Type.APP2_SET_CURRENT_SERVICE, this.lsSetCurr);
        this.bcs.addEventListener(Type.APP2_REMOVE_BOOKING_AND_UNMASK, this.lsRemBook);

        this.bcs.postMessage(Type.APP2_GET_SELECTED_BOOKING, {}, "*");

    }


    ngOnDestroy() {
        super.ngOnDestroy();
        this.bcs.removeEventListener(Type.APP2_SET_CURRENT_SERVICE, this.lsSetCurr);
        this.bcs.removeEventListener(Type.APP2_REMOVE_BOOKING_AND_UNMASK, this.lsRemBook);
    }

    buildRowMenu(menuItems: MenuItemValue[], source) {
        menuItems = [{
            name: 'Aggiungi al servizio ' + (this.currentServiceCode ? this.currentServiceCode : ""),
            id: 'add_booking_to_service',
            position: 0,
            enable: this.currentServiceId ? true : false
        }, {
            name: 'Vai alla Prenotazione',
            id: 'go_to_booking',
            position: 1,
            enable: true
        }];
        return super.buildRowMenu(menuItems,source);
    }

    createDefaultMenu() {
        let optionItems = [];
        return optionItems;
    }

    public onOptionItemClicked(row: any, source: string, enabled: boolean, event): any {
        if (enabled) {
            let src = source.toLowerCase();
            switch (src) {
                case 'add_booking_to_service':

                    this.componentService_ex.getRootComponent().mask();

                    let param: AddBookingToServiceMessage = {
                        bookingId: (<OverviewBookingDTO>this.currentSelected).id,
                        serviceId: this.currentServiceId
                    }

                    this.bcs.postMessage(Type.ADD_BOOKING_TO_SERVICE, param, "*");
                    return;
                case 'go_to_booking':
                    let archiveBooking=1;
                    if(row.source && row.source=='S') archiveBooking=row.source;
                    let msg: NavigateMessage = {
                        path: 'modifica-prenotazione/'+archiveBooking+'/' + (<OverviewBookingDTO>this.currentSelected).id,
                    };
                    this.bcs.postMessage(Type.navigate, msg);
                    return;
            }
        }

    }

    triggerSubmit(filterInput: any) {
        filterInput.sinottico = true;
        super.triggerSubmit(filterInput);
    }


}