import { Injectable, EventEmitter } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import { Observable } from 'rxjs/Observable';
import { StompConfig, StompService } from '@stomp/ng2-stompjs';
import * as Stomp from '@stomp/stompjs';
import * as Collections from 'typescript-collections';
import { BackendConfigService } from './config.service';


declare var SockJS: any;

interface Message {
    topic: string;
    data: any;
}

export class Subscription {
    id: string;
    observ$: Subject<Message>

    constructor(id: string, o: Subject<Message>) {
        this.id = id;
        this.observ$ = o;
    }

    public asObservable(): Observable<Message> {
        return this.observ$.asObservable()
    }
}

class Guid {
    static newGuid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
}


@Injectable()
export class MessageService {

    private dict = new Collections.Dictionary<String, Collections.LinkedList<Subscription>>();

    private stompService: StompService;

    private bcs: BackendConfigService;



    constructor(bcs: BackendConfigService) {
        this.bcs = bcs;
        this.crateStompService();
    }

    crateStompService() {
        if (this.bcs.isWsEnabled()) {
            let sockJsInstance = new SockJS(this.bcs.getURLBase() + 'ordinariws?token=trytofetchrealtokenplease');

            let stompConfig = {
                // Which server?
                /*url: 'ws://127.0.0.1:15674/ws',*/
                url: () => { return sockJsInstance },

                // Headers
                // Typical keys: login, passcode, host
                headers: {
                    /*  login: 'guest',
                      passcode: 'guest'*/
                },

                // How often to heartbeat?
                // Interval in milliseconds, set to 0 to disable
                heartbeat_in: 0, // Typical value 0 - disabled
                heartbeat_out: 20000, // Typical value 20000 - every 20 seconds

                // Wait in milliseconds before attempting auto reconnect
                // Set to 0 to disable
                // Typical value 5000 (5 seconds)
                reconnect_delay: 5000,

                // Will log diagnostics on console
                debug: true
            };

            this.stompService = new StompService(stompConfig);
        }
    }


    public start(queue: string, checkConn?: boolean): any {
        if (this.stompService) {
            //console.log("subscribe to: " + queue);
            //console.log("stomp service connected? :" + this.stompService.connected);
            this.stompService.subscribe(queue).subscribe((msg) => {
                //console.log("received msg: " + msg.body);
                try{
                    let body = JSON.parse(msg.body);
                    let topic = body.destination;
                    this.addMessage(topic, body);
                 }catch(err){
                    console.log("error while dispatching message");
                }
            });
            let check = true;
            if (checkConn) {
                setInterval(() => {

                    let connected = this.stompService.connected();
                    console.log("checking stomp connection: " + connected);
                    if (!connected) {
                        this.stompService.disconnect();
                        this.crateStompService();
                        setTimeout(() => this.start(queue, false), 1000);
                    }
                }, 5000);
            }
        }
    }

    public subscribe(topic: string): Subscription {
        if (this.stompService) {
            let id = Guid.newGuid();
            let list = this.dict.getValue(topic);
            if (!list) {
                list = new Collections.LinkedList<Subscription>();
            }
            let sub = new Subscription(id, new Subject<Message>());
            list.add(sub);
            this.dict.setValue(topic, list);
            return sub;
        }
        new Subscription("error", new Subject<Message>());
    }

    public unsubscribe(topic: string, subscription: Subscription): boolean {
        let list = this.dict.getValue(topic);
        if (!list) {
            return false;
        }
        let removed = list.removeElementAtIndex(list.indexOf(subscription, (s) => {
            return s.id === subscription.id;
        }));
        if (!removed) { return false };
        return true;
    }

    private addMessage(topic, message) {
        let list = this.dict.getValue(topic);
        if (!list) {
            //console.log("no subscribers to send message");
            return;
        }
        list.forEach(function (s) {
            if(s && s.observ$ && !s.observ$.closed){
                s.observ$.next({ topic: topic, data: message });    
            }                        
        });
    }
}