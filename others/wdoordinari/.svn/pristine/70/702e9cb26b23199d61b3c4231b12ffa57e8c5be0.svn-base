/**
 * Swagger Maven Plugin Sample
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AcknowledgeResp } from '../model/acknowledgeResp';
import { ErrorMessage } from '../model/errorMessage';
import { GenericMessageDTO } from '../model/genericMessageDTO';
import { SendActivationReq } from '../model/sendActivationReq';
import { SendUpdateActivationReq } from '../model/sendUpdateActivationReq';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StormoModuleServiceService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * cleanActivation
     * Permette di inviare una richiesta di cancellazione di una attivazione verso la risorsa
     * @param sendActivationReq 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cleanActivation(sendActivationReq?: SendActivationReq, observe?: 'body', reportProgress?: boolean): Observable<AcknowledgeResp>;
    public cleanActivation(sendActivationReq?: SendActivationReq, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AcknowledgeResp>>;
    public cleanActivation(sendActivationReq?: SendActivationReq, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AcknowledgeResp>>;
    public cleanActivation(sendActivationReq?: SendActivationReq, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<AcknowledgeResp>(`${this.basePath}/api/secure/rest/stormo/cleanActivation`,
            sendActivationReq,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * testMobile
     * Permette di testare la presenza di una risorsa mobile
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetMobile(sessionId: string, observe?: 'body', reportProgress?: boolean): Observable<AcknowledgeResp>;
    public resetMobile(sessionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AcknowledgeResp>>;
    public resetMobile(sessionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AcknowledgeResp>>;
    public resetMobile(sessionId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sessionId === null || sessionId === undefined) {
            throw new Error('Required parameter sessionId was null or undefined when calling resetMobile.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AcknowledgeResp>(`${this.basePath}/api/secure/rest/stormo/resetMobile`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * sendActivation
     * Permette di inviare una richiesta di attivazione verso la risorsa
     * @param sendActivationReq 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sendActivation(sendActivationReq?: SendActivationReq, observe?: 'body', reportProgress?: boolean): Observable<AcknowledgeResp>;
    public sendActivation(sendActivationReq?: SendActivationReq, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AcknowledgeResp>>;
    public sendActivation(sendActivationReq?: SendActivationReq, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AcknowledgeResp>>;
    public sendActivation(sendActivationReq?: SendActivationReq, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<AcknowledgeResp>(`${this.basePath}/api/secure/rest/stormo/sendActivation`,
            sendActivationReq,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * testMobile
     * Permette di testare la presenza di una risorsa mobile
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testMobile(sessionId: string, observe?: 'body', reportProgress?: boolean): Observable<AcknowledgeResp>;
    public testMobile(sessionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AcknowledgeResp>>;
    public testMobile(sessionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AcknowledgeResp>>;
    public testMobile(sessionId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sessionId === null || sessionId === undefined) {
            throw new Error('Required parameter sessionId was null or undefined when calling testMobile.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AcknowledgeResp>(`${this.basePath}/api/secure/rest/stormo/testMobile`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * sendActivation
     * Permette di aggiornare una richiesta di attivazione verso la risorsa mobile
     * @param sendUpdateActivationReq 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateActivation(sendUpdateActivationReq?: SendUpdateActivationReq, observe?: 'body', reportProgress?: boolean): Observable<AcknowledgeResp>;
    public updateActivation(sendUpdateActivationReq?: SendUpdateActivationReq, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AcknowledgeResp>>;
    public updateActivation(sendUpdateActivationReq?: SendUpdateActivationReq, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AcknowledgeResp>>;
    public updateActivation(sendUpdateActivationReq?: SendUpdateActivationReq, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<AcknowledgeResp>(`${this.basePath}/api/secure/rest/stormo/updateActivation`,
            sendUpdateActivationReq,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
