import { Injectable } from "@angular/core";
import { AddBookingToServiceMessage, Message, Type } from "common/services/messages";
import { ComponentHolderService } from "./shared-service";
import { BookingToServiceInputDTO, TransportModuleServiceApi, ServiceDTO } from "services/gen";
import { BrowserCommunicationService } from "common/services/browser-communication.service";
import { GestioneServiziComponent } from "../gestione-servizi/gestione-servizi-component";

@Injectable()
export class ServiziService {

    private addBookingToServiceLs;

    private gestioneServizi: GestioneServiziComponent;

    constructor(
        private componentService: ComponentHolderService,
        private bcs: BrowserCommunicationService,
        private transportService: TransportModuleServiceApi,
    ) {
        this.addBookingToServiceLs = (ev: Message) => {
            let data: AddBookingToServiceMessage = <any>ev;

            if (!data.serviceId || !data.bookingId) {
                if (!data.serviceId) {
                    this.componentService.getRootComponent().showToastMessage('warning', "Selezionare prima un servizio");
                    return;
                }

                if (!data.bookingId) {
                    this.componentService.getRootComponent().showToastMessage('warning', "Selezionare prima una prenotazione");
                    return;
                }
                this.bcs.postMessage(Type.APP2_REMOVE_BOOKING_AND_UNMASK, {}, "*");
            }

            let bean: BookingToServiceInputDTO = {
                bookingId: data.bookingId,
                serviceId: data.serviceId,
                returnFlag: false
            };

            this.transportService.addBookingToService(bean).catch((e, o) => {
                this.bcs.postMessage(Type.APP2_REMOVE_BOOKING_AND_UNMASK, {}, "*");
                return [];
            }).subscribe(result => {
                let res: ServiceDTO = result;
                
                //invia stormo activation
                this.gestioneServizi.sendStormoUpdateActivation(bean.serviceId);

                let param: AddBookingToServiceMessage = {
                    bookingId: bean.bookingId,
                    serviceId: bean.serviceId
                }
                this.bcs.postMessage(Type.APP2_REMOVE_BOOKING_AND_UNMASK, param, "*");
                
                if (this.gestioneServizi) {
                    this.gestioneServizi.refreshService();
                }
            });
        }

        this.bcs.addEventListener(Type.ADD_BOOKING_TO_SERVICE, this.addBookingToServiceLs);
    }
    
    public setGestioneServiziComponent(gestioneServizi: GestioneServiziComponent) {
        this.gestioneServizi = gestioneServizi;
    }

}