/**
 * Swagger Maven Plugin Sample
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AuthorityModuleServiceApi {

    protected basePath = 'http://localhost';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Permette di ottenere la lista dei numeri di telefono dell'ente
     * @summary getAuthorityTelephone
     * @param authorityId 
     */
    public getAuthorityTelephone(authorityId: string, extraHttpRequestParams?: any): Observable<Array<models.AuthorityDTO>> {
        return this.getAuthorityTelephoneWithHttpInfo(authorityId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Permette di cercare gli enti per centro di costo
     * @summary searchAuthorityByCostCenter
     * @param body 
     */
    public searchAuthorityByCostCenter(body?: models.SearchCostCenterDTO, extraHttpRequestParams?: any): Observable<Array<models.AuthorityInfoDTO>> {
        return this.searchAuthorityByCostCenterWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Permette di cercare gli enti che posseggono un determinato department Id
     * @summary searchAuthorityByDepId
     * @param body 
     */
    public searchAuthorityByDepId(body?: models.SearchIdDTO, extraHttpRequestParams?: any): Observable<models.AuthorityDTO> {
        return this.searchAuthorityByDepIdWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Permette di cercare gli enti con i filtri passati in input
     * @summary searchAuthorityByFilter
     * @param body 
     */
    public searchAuthorityByFilter(body?: models.AuthorityFilterDTO, extraHttpRequestParams?: any): Observable<Array<models.AuthorityDTO>> {
        return this.searchAuthorityByFilterWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Permette di cercare gli enti per id
     * @summary searchAuthorityById
     * @param body 
     */
    public searchAuthorityById(body?: models.SearchIdDTO, extraHttpRequestParams?: any): Observable<models.AuthorityDTO> {
        return this.searchAuthorityByIdWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Permette di cercare gli enti per telefono.
     * @summary searchAuthorityByTelephone
     * @param body 
     */
    public searchAuthorityByTelephone(body?: models.SearchTelephoneDTO, extraHttpRequestParams?: any): Observable<Array<models.AuthorityInfoDTO>> {
        return this.searchAuthorityByTelephoneWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Permette di cercare i reparti per telefono
     * @summary searchDepartmentByTelephone
     * @param body 
     */
    public searchDepartmentByTelephone(body?: models.SearchTelephoneDTO, extraHttpRequestParams?: any): Observable<Array<models.DepartmentInfoDTO>> {
        return this.searchDepartmentByTelephoneWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Permette di cercare i reparti per centro di costo
     * @summary searchDepartmentsByCenterCost
     * @param body 
     */
    public searchDepartmentsByCenterCost(body?: models.SearchCostCenterDTO, extraHttpRequestParams?: any): Observable<Array<models.DepartmentInfoDTO>> {
        return this.searchDepartmentsByCenterCostWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * getAuthorityTelephone
     * Permette di ottenere la lista dei numeri di telefono dell&#39;ente
     * @param authorityId 
     */
    public getAuthorityTelephoneWithHttpInfo(authorityId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/authority/getAuthorityTelephone';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'authorityId' is not null or undefined
        if (authorityId === null || authorityId === undefined) {
            throw new Error('Required parameter authorityId was null or undefined when calling getAuthorityTelephone.');
        }
        if (authorityId !== undefined) {
            queryParameters.set('authorityId', <any>authorityId);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * searchAuthorityByCostCenter
     * Permette di cercare gli enti per centro di costo
     * @param body 
     */
    public searchAuthorityByCostCenterWithHttpInfo(body?: models.SearchCostCenterDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/authority/searchAuthorityByCostCenter';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * searchAuthorityByDepId
     * Permette di cercare gli enti che posseggono un determinato department Id
     * @param body 
     */
    public searchAuthorityByDepIdWithHttpInfo(body?: models.SearchIdDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/authority/searchAuthorityByDepId';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * searchAuthorityByFilter
     * Permette di cercare gli enti con i filtri passati in input
     * @param body 
     */
    public searchAuthorityByFilterWithHttpInfo(body?: models.AuthorityFilterDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/authority/searchAuthority';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * searchAuthorityById
     * Permette di cercare gli enti per id
     * @param body 
     */
    public searchAuthorityByIdWithHttpInfo(body?: models.SearchIdDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/authority/searchAuthorityById';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * searchAuthorityByTelephone
     * Permette di cercare gli enti per telefono.
     * @param body 
     */
    public searchAuthorityByTelephoneWithHttpInfo(body?: models.SearchTelephoneDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/authority/searchAuthorityByTelephone';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * searchDepartmentByTelephone
     * Permette di cercare i reparti per telefono
     * @param body 
     */
    public searchDepartmentByTelephoneWithHttpInfo(body?: models.SearchTelephoneDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/authority/searchDepartmentByTelephone';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * searchDepartmentsByCenterCost
     * Permette di cercare i reparti per centro di costo
     * @param body 
     */
    public searchDepartmentsByCenterCostWithHttpInfo(body?: models.SearchCostCenterDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/authority/searchDepartmentsByCenterCost';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
