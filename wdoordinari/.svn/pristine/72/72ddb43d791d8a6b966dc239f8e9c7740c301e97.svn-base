import { Component, ViewEncapsulation, Input, forwardRef, OnInit } from "@angular/core";
import { ControlValueAccessor, NG_VALUE_ACCESSOR } from "@angular/forms";
import * as moment from 'moment';



@Component({
    selector: "hour-menu",
    templateUrl: "./hour-menu.html",
    styleUrls: ["./hour-menu.scss"],
    encapsulation: ViewEncapsulation.None,
    providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => HourMenu),
            multi: true
        }
    ]
})
export class HourMenu implements ControlValueAccessor, OnInit {


    @Input() min = "00:00";
    @Input() max = "24:00";

    public values = new Array<string>();

    private data: any;
    // the method set in registerOnChange, it is just 
    // a placeholder for a method that takes one parameter, 
    // we use it to emit changes back to the form
    private propagateChange = (_: any) => { };


    ngOnInit() {
        let last = this.min;

        while (last.localeCompare(this.max) <= 0) {
            this.values.push(last);
            last = moment(last, "HH:mm").add(1, 'h').format("HH:mm");
        }
    }

    public selectHour(hour: string) {
        this.data = hour;
        // update the form
        this.propagateChange(this.data);
    }

    writeValue(obj: any): void {
        if (obj) {
            this.data = obj;
        }
    }


    registerOnChange(fn: any): void {
        this.propagateChange = fn;
    }


    registerOnTouched(fn: any): void { }

}