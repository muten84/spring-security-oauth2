import {
    ViewChild, ElementRef, Directive,
    Component, OnInit, OnDestroy, AfterViewInit, AfterContentChecked,
    ViewEncapsulation, ViewContainerRef, EventEmitter, Input, Output
} from '@angular/core';
import { Router, ActivatedRoute, Params } from '@angular/router';
import { NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';
import { OrdinariCombo } from '../core/core.module';
import { NgbModal, ModalDismissReasons, NgbDropdown } from '@ng-bootstrap/ng-bootstrap';

import { RicercaBookingFilter, BookingSearchItem } from './ricerca-avanzata-prenotazioni-model';

import { ComponentHolderService, MiddleComponent } from '../service/shared-service';
/*import * as _ from "lodash";*/
/*import * as jQuery from "jquery";*/
import { PaginationModule, PaginationConfig } from 'ngx-bootstrap';
/*import { Ng2TableModule } from 'ng2-table/ng2-table';*/
import { DataTableResource } from 'angular-2-data-table';
/*import { MiddleComponent} from '../util/component-interface';*/
import * as _ from 'lodash'


import {
    BookingModuleServiceApi, OverviewBookingDTO,
    OverviewBookingFilterDTO
} from '../../services/services.module';


@Component({
    selector: 'ricerca-avanzata-prenotazioni-table',
    templateUrl: './ricerca-avanzata-prenotazioni-table.component.html',
    encapsulation: ViewEncapsulation.None,
    providers: [PaginationConfig],
})
export class RicercaAvanzataPrenotazioniTableComponent implements OnInit, MiddleComponent, OnDestroy, AfterViewInit, AfterContentChecked {
    subscription: any;

    @Input()
    private searchResult: OverviewBookingDTO[];

    @ViewChild('myDrop') myDrop: NgbDropdown;


    // @ContentChild('tabellaPrenotazioni') bookingSearch: RicercaPrenotazioniTableComponent;

    private filter: OverviewBookingFilterDTO;
    private filterToSave: OverviewBookingFilterDTO;
    private name: string;


    private data: Array<any> = this.searchResult;
    itemResource = new DataTableResource(this.searchResult);
    items = [];
    itemCount = 0;

    public rows: Array<any> = [];

    public columns: Array<any> = [
        { title: 'Codice', name: 'code', filtering: { filterString: '', placeholder: 'Filtra per codice' } },
        { title: 'Data', name: 'transportDate' },
        { title: 'Tipo', name: 'transportType' },
        { title: 'Deamb.', name: 'patientStatus' },
        { title: 'Convenzione', name: 'convention' },
        { title: 'Partenza', name: 'startAddress' },
        { title: 'Destinazione', name: 'endAddress' },
        { title: 'Cognome', name: 'patientSurname' },
        { title: 'Nome', name: 'patientName' },
        { title: 'Postazione', name: 'postazione' },
        { title: '', name: '', options: true }
    ];

    public config: any = {
        paging: true,
        sorting: { columns: this.columns },
        filtering: { filterString: '' },
        /**/
        /*className: ['table-responsive', 'table-striped', 'table-bordered', 'table search tablesaw togglable-table tablesaw-columntoggle']*/
    };

    public page = 1;
    public itemsPerPage = 20;
    public maxSize = 5;
    public numPages = 1;
    public length = 0;

    ngOnInit(): void {
        /*this.subscription = this.bookingService.resultChange$.subscribe(
            item => //console.log("subscription event from----" + item));*/
        /*this.subscription = this.bookingService.searchResult.subscribe((e) => //console.log("event receive in component: " + e));*/
    }


    ngOnDestroy() {
        /*this.subscription.unsubscribe();*/
    }


    constructor(private componentService: ComponentHolderService, private bookingService: BookingModuleServiceApi, paginationConfig: PaginationConfig, private router: Router) {
        /*this.bookingService.searchResult.subscribe((e) => //console.log("search result received: " + e))*/

        if (!_.isUndefined(this.data)) {
            this.length = this.data.length;
            this.itemResource.count().then(count => this.itemCount = count);
        }
        paginationConfig.main.nextText = '>';
        paginationConfig.main.previousText = '<';
        paginationConfig.main.lastText = '>>';
        paginationConfig.main.firstText = '<<';
        paginationConfig.main.pageBtnClass = '';
    }




    ngAfterContentChecked(): void {
        /*//console.log("ngAfterContentChecked");*/
        /* let section = <HTMLElement><any>document.getElementById('ricercaPrenotazioni');
         let innerSections = <HTMLElement[]><any>section.getElementsByClassName("to-check");
         for (let s of innerSections) {
             if (!s.classList.contains("show")) {
               
             }
             else {
               
             }
         }*/

    }

    public searchBookings(): void {
        //console.log('Search bookings in ricerca prenotazioni-table: ' + this.filterToSave.toString());
        this.bookingService.searchBookingByFilter(this.filterToSave).subscribe(result => {
            this.searchResult = result ? result.resultList : [];
            this.data = this.searchResult;
            this.data.forEach(e => {
                e.optionItems = [
                    {
                        name: "Modifica prenotazione",
                        eventSource: "modifybooking",
                        icon: "fa-pencil"
                    },
                    {
                        name: "Crea servizio",
                        eventSource: "modifybooking",
                        icon: "fa-plus-circle"
                    },
                    {
                        name: "Associa al servizio",
                        eventSource: "modifybooking",
                        icon: "fa-check-square"
                    }],
                    e.detail = {
                        groups: [{
                            "name": "Trasporto",
                            "icon": "fa fa-ambulance",
                            values: [{
                                "key": "Stato",
                                "value": e.status,
                            },
                            {
                                "key": "Fase",
                                "value": e.phase
                            },
                            {
                                "key": "Priorit√†",
                                "value": e.priority
                            }]
                        },
                        {
                            "name": "Paziente",
                            "icon": "fa-user-circle",
                            values: [{
                                "key": "Accompagnato",
                                "value": e.patientCompare
                            }
                            ]
                        },
                        {
                            "name": "Destinazione",
                            "icon": "fa-hospital-o",
                            values: [{
                                "key": "Ritorno",
                                "value": e.returnDate
                            }]
                        }
                        ]
                    };
            });

            this.length = this.data.length;
            this.onChangeTable(this.config);
        });
    }

    triggerSubmit(filterInput: any) {
        if (filterInput != null) {
            this.filter = filterInput;
            this.filterToSave = JSON.parse(JSON.stringify(this.filter));
            if (filterInput.transportDate != null) {
                this.filterToSave.transportDate = new Date(filterInput.transportDate['year'], filterInput.transportDate['month'] - 1, filterInput.transportDate['day']);
            }
        }
        this.searchBookings();
    }

    fetchComponentData() {

    }


    ngAfterViewInit(): void {
        //console.log('ngAfterViewInit: RicercaPrenotazioniTableComponent: ')
        this.componentService.setMiddleComponent('currentSearchTable', this);
    }

    onMenuShow(data: any) {
        //console.log('Menu for row is showed compute changes...' + data.optionItems.length);
        if (data.optionItems.length === 0) {
            data.optionItems.push({
                name: 'Modifica prenotazione',
                eventSource: 'modifybooking',
                icon: 'fa-pencil'
            })
        }
    }


    public changePage(page: any, data: Array<any> = this.data): Array<any> {
        let start = (page.page - 1) * page.itemsPerPage;
        let end = page.itemsPerPage > -1 ? (start + page.itemsPerPage) : data.length;
        return data.slice(start, end);
    }

    public changeSort(data: any, config: any): any {
        if (!config.sorting) {
            return data;
        }

        let columns = this.config.sorting.columns || [];
        let columnName: string = void 0;
        let sort: string = void 0;

        for (let i = 0; i < columns.length; i++) {
            if (columns[i].sort !== '' && columns[i].sort !== false) {
                columnName = columns[i].name;
                sort = columns[i].sort;
            }
        }

        if (!columnName) {
            return data;
        }

        // simple sorting
        return data.sort((previous: any, current: any) => {
            if (previous[columnName] > current[columnName]) {
                return sort === 'desc' ? -1 : 1;
            } else if (previous[columnName] < current[columnName]) {
                return sort === 'asc' ? -1 : 1;
            }
            return 0;
        });
    }

    public changeFilter(data: any, config: any): any {
        let filteredData: Array<any> = data;
        this.columns.forEach((column: any) => {
            if (column.filtering) {
                filteredData = filteredData.filter((item: any) => {
                    //console.log(column.name);
                    return item[column.name].match(column.filtering.filterString);
                });
            }
        });

        if (!config.filtering) {
            return filteredData;
        }

        if (config.filtering.columnName) {
            return filteredData.filter((item: any) =>
                item[config.filtering.columnName].match(this.config.filtering.filterString));
        }

        let tempArray: Array<any> = [];
        filteredData.forEach((item: any) => {
            let flag = false;
            this.columns.forEach((column: any) => {
                if (item[column.name]) {
                    /*  if (column.type == 'date') {
                            let columnDate = new Date(item[column.name]);
                            let day = columnDate.getDate();
                            let monthIndex = columnDate.getMonth()+1;
                            let year = columnDate.getFullYear();
                            item[column.name] = day + "/" + monthIndex + "/" + year;
                        } */
                    if (item[column.name].toString().match(this.config.filtering.filterString)) {
                        flag = true;
                    }
                } else {
                    item[column.name] = '';
                }
            });
            if (flag) {
                tempArray.push(item);
            }
        });
        filteredData = tempArray;

        return filteredData;
    }

    public onChangeTable(config: any, page: any = { page: this.page, itemsPerPage: this.itemsPerPage }): any {
        //console.log('onChangeTable');
        if (config.filtering) {
            Object.assign(this.config.filtering, config.filtering);
        }

        if (config.sorting) {
            Object.assign(this.config.sorting, config.sorting);
        }

        let filteredData = this.changeFilter(this.data, this.config);
        let sortedData = this.changeSort(filteredData, this.config);
        this.rows = page && config.paging ? this.changePage(page, sortedData) : sortedData;
        this.length = sortedData.length;
    }

    public onCellClick(data: any): any {
        //console.log('onCellClick');
        /*this.myDrop.open();*/
        /*jQuery(el.nativeElement).dropdown();*/

    }

    public onOptionItemClicked(data: any): any {
        //console.log('onOptionItemClicked: ' + data);
        this.router.navigate(['/modifica-prenotazione', data.row.bookingCode]);
    }

    reloadItems(params) {
        //        this.bookingService.searhcBookings( this.filter ).subscribe( result => {
        //            this.searchResult = result;
        //            this.data = this.searchResult;
        //            this.length = this.data.length;
        //            this.onChangeTable( this.config );
        //            this.itemResource = new DataTableResource( this.searchResult );
        //            this.itemResource.query( params ).then( items => this.items = items );
        //        } );

    }

    // special properties:

    rowClick(rowEvent) {
        //console.log('rowClick');
    }

    rowDoubleClick(rowEvent) {
        //console.log('rowDoubleClick');
    }

    rowTooltip(item) { return item.jobTitle; }

    /*onSearchAvailable(data) {
        //console.log("onSearchAvailable: " + data);
    }*/

}
