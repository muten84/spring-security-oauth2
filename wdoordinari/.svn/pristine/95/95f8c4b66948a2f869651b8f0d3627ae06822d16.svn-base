/**
 * Swagger Maven Plugin Sample
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BookingModuleServiceApi {

    protected basePath = 'http://localhost';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Permette di cancellare il trasporto passato in input
     * @summary discardBooking
     * @param body 
     */
    public discardBooking(body?: models.BookingDiscardDTO, extraHttpRequestParams?: any): Observable<models.GenericResultDTO> {
        return this.discardBookingWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Permette di duplicare il trasporto passato in input
     * @summary duplicateBookingByDate
     * @param body 
     */
    public duplicateBooking(body?: models.BookingDuplicateListDTO, extraHttpRequestParams?: any): Observable<models.GenericResultDTO> {
        return this.duplicateBookingWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Restituisce il booking individuato dal code in imput
     * @summary getBookingById
     * @param code 
     */
    public getBookingByCode(code: string, extraHttpRequestParams?: any): Observable<models.BookingDTO> {
        return this.getBookingByCodeWithHttpInfo(code, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Restituisce il booking individuato dall'id in imput
     * @summary getBookingById
     * @param id 
     * @param source 
     */
    public getBookingById(id: string, source?: string, extraHttpRequestParams?: any): Observable<models.GenericResultDTO> {
        return this.getBookingByIdWithHttpInfo(id, source, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Restituisce lo storico delle modifiche del booking con l'id in imput
     * @summary getBookingHistoryById
     * @param id 
     */
    public getBookingHistoryById(id: string, extraHttpRequestParams?: any): Observable<Array<models.BookingHistoryDTO>> {
        return this.getBookingHistoryByIdWithHttpInfo(id, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Restituisce la lista delle possibili motivazioni per la cancellazione di un booking
     * @summary getDiscardBookingReasonList
     */
    public getDiscardBookingReasonList(extraHttpRequestParams?: any): Observable<Array<models.DeletedBookingReasonDTO>> {
        return this.getDiscardBookingReasonListWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Permette di cercare le prenotazioni duplicate rispetto a quella in input. Il flag visualizeAll a true esclude la data di prenotazione come elemento di confronto
     * @summary getDuplicateBooking
     * @param body 
     */
    public getDuplicateBooking(body?: models.BookingDuplicateSearchDTO, extraHttpRequestParams?: any): Observable<models.GenericResultDTO> {
        return this.getDuplicateBookingWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Restituisce la lista delle ultime premotazioni
     * @summary ultimePrenotazioni
     */
    public getUltimePrenotazioni(extraHttpRequestParams?: any): Observable<Array<models.OverviewBookingDTO>> {
        return this.getUltimePrenotazioniWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Permette di inserire o aggiornare il trasporto in input
     * @summary saveUpdateBooking
     * @param body 
     */
    public saveBooking(body?: models.BookingDTO, extraHttpRequestParams?: any): Observable<models.GenericResultDTO> {
        return this.saveBookingWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Permette di cercare le prenotazioni dei trasporti con i filtri (avanzati) passati in input
     * @summary searchAdvancedBookingByFilter
     * @param body 
     */
    public searchAdvancedBooking(body?: models.AdvancedBookingSearchFilterDTO, extraHttpRequestParams?: any): Observable<models.AdvancedSearchBookingResultDTO> {
        return this.searchAdvancedBookingWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Permette di cercare le prenotazioni dei trasporti con i filtri passati in input
     * @summary searchBookingByFilter
     * @param body 
     */
    public searchBookingByFilter(body?: models.OverviewBookingFilterDTO, extraHttpRequestParams?: any): Observable<models.SearchBookingResultDTO> {
        return this.searchBookingByFilterWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Porta un ritorno nella coda delle pronotazioni
     * @summary switchBookingReturn
     * @param body 
     */
    public switchBookingReturn(body?: models.SwitchBookingReturnDTO, extraHttpRequestParams?: any): Observable<models.SwitchBookingReturnResultDTO> {
        return this.switchBookingReturnWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * discardBooking
     * Permette di cancellare il trasporto passato in input
     * @param body 
     */
    public discardBookingWithHttpInfo(body?: models.BookingDiscardDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/booking/discardBooking';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * duplicateBookingByDate
     * Permette di duplicare il trasporto passato in input
     * @param body 
     */
    public duplicateBookingWithHttpInfo(body?: models.BookingDuplicateListDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/booking/duplicateBooking';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getBookingById
     * Restituisce il booking individuato dal code in imput
     * @param code 
     */
    public getBookingByCodeWithHttpInfo(code: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/booking/getBookingByCode';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'code' is not null or undefined
        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling getBookingByCode.');
        }
        if (code !== undefined) {
            queryParameters.set('code', <any>code);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getBookingById
     * Restituisce il booking individuato dall&#39;id in imput
     * @param id 
     * @param source 
     */
    public getBookingByIdWithHttpInfo(id: string, source?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/booking/getBookingById';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getBookingById.');
        }
        if (source !== undefined) {
            queryParameters.set('source', <any>source);
        }

        if (id !== undefined) {
            queryParameters.set('id', <any>id);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getBookingHistoryById
     * Restituisce lo storico delle modifiche del booking con l&#39;id in imput
     * @param id 
     */
    public getBookingHistoryByIdWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/booking/getBookingHistory';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getBookingHistoryById.');
        }
        if (id !== undefined) {
            queryParameters.set('id', <any>id);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getDiscardBookingReasonList
     * Restituisce la lista delle possibili motivazioni per la cancellazione di un booking
     */
    public getDiscardBookingReasonListWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/booking/getDiscardBookingReasonList';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getDuplicateBooking
     * Permette di cercare le prenotazioni duplicate rispetto a quella in input. Il flag visualizeAll a true esclude la data di prenotazione come elemento di confronto
     * @param body 
     */
    public getDuplicateBookingWithHttpInfo(body?: models.BookingDuplicateSearchDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/booking/getDuplicateBooking';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * ultimePrenotazioni
     * Restituisce la lista delle ultime premotazioni
     */
    public getUltimePrenotazioniWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/booking/ultimePrenotazioni';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * saveUpdateBooking
     * Permette di inserire o aggiornare il trasporto in input
     * @param body 
     */
    public saveBookingWithHttpInfo(body?: models.BookingDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/booking/saveUpdateBooking';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * searchAdvancedBookingByFilter
     * Permette di cercare le prenotazioni dei trasporti con i filtri (avanzati) passati in input
     * @param body 
     */
    public searchAdvancedBookingWithHttpInfo(body?: models.AdvancedBookingSearchFilterDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/booking/searchAdvancedBooking';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * searchBookingByFilter
     * Permette di cercare le prenotazioni dei trasporti con i filtri passati in input
     * @param body 
     */
    public searchBookingByFilterWithHttpInfo(body?: models.OverviewBookingFilterDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/booking/searchBooking';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * switchBookingReturn
     * Porta un ritorno nella coda delle pronotazioni
     * @param body 
     */
    public switchBookingReturnWithHttpInfo(body?: models.SwitchBookingReturnDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/booking/switchBookingReturn';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
