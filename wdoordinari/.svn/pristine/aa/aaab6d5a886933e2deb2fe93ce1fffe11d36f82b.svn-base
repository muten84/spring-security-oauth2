import { OnInit, Component } from '@angular/core';
import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
import { PatientFilterDTO, GenericResultDTO, PatientArchiveDTO } from 'services/services.module';
import { ComponentHolderService } from 'app/service/shared-service';
import { convertMomentDateToStruct, convertToDate } from 'app/util/convert';
import * as moment from 'moment';
import { CoreTableColumn } from 'app/core/table/core-table/core-table.component';
import { StaticDataService } from 'app/static-data/cached-static-data';
import { ResultGridModalComponent } from 'app/gestione-prenotazioni/result-grid-modal-component';
import { NgbModal, NgbModalOptions } from '@ng-bootstrap/ng-bootstrap/modal/modal';
import { PatientArchiveModuleServiceApi } from 'services/gen/api/PatientArchiveModuleServiceApi';

@Component({
    selector: 'ricerca-paziente-modal',
    templateUrl: './ricerca-paziente-component.html'
})
export class RicercaPazienteModalComponent implements OnInit {

    private model : PatientArchiveDTO;

    private confirmDialogOptions : NgbModalOptions = { windowClass: 'ricerca-paziente-confirm-modal' };
    
    private ARCHIVIO_UTENTI_TRASPORTATI : boolean;

    private showPatientRegistryList : boolean = false;

    private columnsPatientRegistryTable: Array<CoreTableColumn> = [
        { title: 'Cognome', name: 'surname', sort: 'asc', style: { "flex-grow": "17" } },
        { title: 'Nome', name: 'name', style: { "flex-grow": "14" } },
        { title: 'Data', name: 'birthDateFormat', style: { "flex-grow": "11" } },
        { title: 'Domicilio', name: 'domicilioCompact', style: { "flex-grow": "19" } },
        { title: 'Distretto', name: 'domicileDistrict', style: { "flex-grow": "23" } },
        { title: 'Usl', name: 'domicileLocalHealthAuthority', style: { "flex-grow": "23" } }
    ];

    private columnsPatientArchiveTable: Array<CoreTableColumn> = [
        { title: 'Cognome', name: 'surname', sort: 'asc', style: { "flex-grow": "15" } },
        { title: 'Nome', name: 'name', style: { "flex-grow": "14" } },
        { title: 'Tessera Sanit.', name: 'sanitaryCode', style: { "flex-grow": "12" } },
        { title: 'Domicilio', name: 'domicilio', style: { "flex-grow": "18" } }
    ];

    private configPatientTable = {
        paging: true,
        sorting: { columns: this.columnsPatientArchiveTable },
        filtering: { filterString: '' },
    };

    private patientList : Array<PatientArchiveDTO> = [];

    constructor(private activeModal: NgbActiveModal, private archiveService: PatientArchiveModuleServiceApi,
        private componentService: ComponentHolderService,
        private sds : StaticDataService,
        private modalService: NgbModal) {
    }

    
    selectPatient(ev) {
        this.model = ev;
    }

    searchPatient() {
        let filter : PatientFilterDTO = {};
        filter.patientFirstName = this.model.name;
        filter.patientLastName = this.model.surname;
        filter.like = true;
        this.componentService.getRootComponent().mask();
        this.archiveService.getPatientsByFilter(filter).catch((err, c) => {
            this.componentService.getRootComponent().unmask();
            return err;
        }).subscribe((result : GenericResultDTO) => {
            let resultList : Array<PatientArchiveDTO> = result.resultList;
            if(resultList && resultList.length > 0) {
                resultList.forEach(patient => {
                    this.convertPatientArchive(patient);
                });
            } else {
                this.componentService.getRootComponent().showToastMessage('warning', 'Nessun paziente trovato.');
            }

            this.patientList = resultList;
            this.componentService.getRootComponent().unmask();
        });
    } 

    searchPatientRegistry() {
        if(!this.checkPatient()) {
            this.componentService.getRootComponent().showToastMessage('warning', 'Digitare almeno cognome e nome del paziente.');
            return;
        }

        this.componentService.getRootComponent().mask();

        let filter : PatientFilterDTO = {};
        filter.patientFirstName = this.model.name;
        filter.patientLastName = this.model.surname;
        
        filter.birthDate = this.model.birthDate;

        filter.sesso = this.model.sex;

        filter.comuneResidenza = this.model.municipality;

        filter.uslAppartenenza = this.model.asl;
        filter.numeroTesseraSanitaria = this.model.sanitaryCode;
        filter.municipalityBirth = this.model.birthPlace;
        filter.externalRefId = this.model.additionalPatientId;
       
        
        this.archiveService.getExternalPatients(filter).catch((err, c) => {
            this.componentService.getRootComponent().unmask();
            return err;
        }).subscribe((result : GenericResultDTO) => {
            let resultList : Array<PatientArchiveDTO> = result.resultList;
            if(resultList && resultList.length > 0) {
                if(resultList.length == 1) {
                    this.model = this.convertFromPatientRegistry(resultList[0]);
                } else {
                    this.patientList = [];
                    resultList.forEach(patient => {
                        this.convertToPatientRegistry(patient); 
                    }); 

                    this.showPatientRegistryList = true;
                    let modal = this.modalService.open(ResultGridModalComponent, { size: 'lg', windowClass : 'ricerca-paziente-modal ricerca-paziente-confirm-modal' });
                    modal.componentInstance.list = resultList;
                    modal.componentInstance.title = 'Selezionare un paziente dall\'anagrafe assistibili';
                    modal.componentInstance.columns = this.columnsPatientRegistryTable;
                    modal.result.then((result : PatientArchiveDTO) => {
                        if (result) {
                            result = this.convertFromPatientRegistry(result);
                            this.model = result;
                            this.showPatientRegistryList = false;
                        }
                    }, (reason) => {
                        this.showPatientRegistryList = false;
                    });
                }
            } else {
                this.patientList = [];
                let errore = result.msgList && result.msgList[0] && result.msgList[0].messageType && result.msgList[0].messageType === 'ERROR';
                if(errore) {
                    this.componentService.getRootComponent().showToastMessage('error', 'Non Ã¨ stato possibile eseguire la ricerca del paziente.');
                } else {
                    this.componentService.getRootComponent().showToastMessage('error', 'Il paziente indicato non esiste nell\'anagrafe assistibili.');
                }
            }
            this.componentService.getRootComponent().unmask();
        });
    }

    deletePatient() {
        if(this.model && this.model.id) {
            this.componentService.getRootComponent().showConfirmDialog('Attenzione!', "Eliminare il paziente selezionato dall'archivio?", this.confirmDialogOptions).then((result) => {
                this.componentService.getRootComponent().mask();
                this.archiveService.deletePatientFromArchive(this.model).catch((err, c) => {
                    this.componentService.getRootComponent().unmask();
                    return err;
                }).subscribe((result : GenericResultDTO) => {
                    let patientId = this.model.id;
                    let resultList : Array<PatientArchiveDTO> = [];
                    this.patientList.forEach(patient => {
                        if(patient.id !== this.model.id) {
                            resultList.push(patient);
                        }
                    });
                    this.clean();
                    this.patientList = resultList;
                    this.componentService.getRootComponent().unmask();              
                })
            });
        }
    }

    
    savePatient() {
        if(!this.model.id && !this.checkPatient()) {
            // INSERT
            this.componentService.getRootComponent().showToastMessage('warning', 'Digitare almeno cognome e nome del paziente.');
            return;
        }

        let msg = 'Aggiungere il paziente in archivio?';
        if(this.model.id) {
            // UPDATE
            msg = 'Aggiornare i dati del paziente in archivio?';
        }

        if ((<any>this.model).birthDateObj != null) {
            this.model.birthDate = convertToDate((<any>this.model).birthDateObj, null);
        }

        this.componentService.getRootComponent().showConfirmDialog('Attenzione!', msg, this.confirmDialogOptions).then((result) => {
            this.componentService.getRootComponent().mask();
            
            this.archiveService.savePatientToArchive(this.model).catch((err) => {
                this.componentService.getRootComponent().unmask();
                return err;
            }).subscribe((result : GenericResultDTO) => {
                let patient : PatientArchiveDTO = this.convertPatientArchive(result.result);
                if(!this.patientList || this.patientList.length == 0) {
                    this.patientList = [ patient ];
                } else {
                    let resultList = this.patientList.slice(0, this.patientList.length);
                    let idx = 0;
                    let founded : boolean = false;
                    resultList.forEach(patient1 => {
                        if(patient1.id === patient.id) {
                            resultList[idx] = patient;
                            founded = true;
                        }
                        idx++;
                    });
                    if(!founded) {
                        resultList.push(patient);
                    }        
                    this.patientList = resultList;   
                }
                this.model = patient;
                this.componentService.getRootComponent().unmask();
            });
        });
    }

    private convertPatientArchive(patient: PatientArchiveDTO) {
        this.convertPatientDate(patient);
        let domicilio = '';

        if(patient.streetName) {
            domicilio = patient.streetName;
        }

        if(patient.houseNumber) {
            domicilio += patient.houseNumber;
        }

        if(patient.municipality) {
            domicilio += patient.municipality;
        }

        (<any>patient).domicilio = domicilio;
        return patient;
    }

    private convertFromPatientRegistry(convertedPatient: PatientArchiveDTO) : PatientArchiveDTO {
        this.convertPatientDate(convertedPatient);
        convertedPatient.id = null;
        if(convertedPatient.comuneDomicilio) {
            convertedPatient.municipality = convertedPatient.comuneDomicilio;
        } else {
            convertedPatient.municipality = convertedPatient.comuneResidenza;
        }
        let istatComuneProvenienza = convertedPatient.comuneProvenienza;
        if(istatComuneProvenienza && istatComuneProvenienza.length >= 3) {
            let prov = istatComuneProvenienza.substr(0,3);
            convertedPatient.province = prov;
        }
        convertedPatient.medicoBaseNome = '';
        if(convertedPatient.medicoBaseNome) {
            convertedPatient.familyDoctor = convertedPatient.medicoBaseNome;
        }
        if(convertedPatient.medicoBaseCognome) {
            if(convertedPatient.medicoBaseNome) {
                convertedPatient.familyDoctor += ' ' + convertedPatient.medicoBaseCognome;
            } else {
                convertedPatient.familyDoctor = convertedPatient.medicoBaseCognome;
            }
        }

        this.convertPatientArchive(convertedPatient);

        return convertedPatient;
    }
    
    private convertPatientDate(patient : PatientArchiveDTO) {
        if(patient != null && patient.birthDate != null) {
            (<any>patient).birthDateObj = convertMomentDateToStruct(moment(patient.birthDate));
            (<any>patient).birthDateFormat = moment(patient.birthDate);
            (<any>patient).birthDateFormat = (<any>patient).birthDateFormat.format('DD-MM-YYYY');
        }
        return patient;
    }

    private convertToPatientRegistry(patient : PatientArchiveDTO) {
        this.convertPatientDate(patient);

        let domicilioCompact = '';
        
        if(patient.streetName) {
            domicilioCompact = patient.streetName + ' ';
        }

        if(patient.houseNumber) {
            domicilioCompact += patient.houseNumber + ' ';
        }

        if(patient.comuneResidenza) {
            domicilioCompact += patient.comuneResidenza + ' ';
        }

        if(patient.capResidenza) {
            domicilioCompact += patient.capResidenza;
        }
        
        (<any>patient).domicilioCompact = domicilioCompact;

        return patient;
    }

    clean() {
        this.model = {};
        this.patientList = [];
    }

    ngOnInit(): void {
        if(!this.model) {
            this.model = {};
        }
        this.ARCHIVIO_UTENTI_TRASPORTATI = this.sds.getTSConfig('ArchivioUtentiTrasportati','FALSE') === 'TRUE';
    }

    close() {
        this.activeModal.close(this.model);
    }

    dismiss() { 
        this.activeModal.dismiss('close');
    }

    confirm() {
        if(this.checkPatient()) {
 
            if ((<any>this.model).birthDateObj != null) {
                this.model.birthDate = convertToDate((<any>this.model).birthDateObj, null);
            }

            this.activeModal.close(this.model);
        } else {
            this.componentService.getRootComponent().showToastMessage('warning', 'Digitare almeno cognome e nome del paziente.');
        }
    }

    private checkPatient() : boolean {
        if(this.model.surname) {
                return true;
            }
        return false;
    }

}