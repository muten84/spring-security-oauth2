/**
 * Swagger Maven Plugin Sample
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CiclicalModuleServiceApi {

    protected basePath = 'http://localhost';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Aggiunge un giorno alla ciclica
     * @summary addCiclicalDaysInfo
     * @param body 
     */
    public addCiclicalDaysInfo(body?: models.CiclicalRequestDTO, extraHttpRequestParams?: any): Observable<models.CiclicalFullDTO> {
        return this.addCiclicalDaysInfoWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Controlla il nuovo intervallo di date della prenotazione ciclica
     * @summary checkNewCiclicalInterval
     * @param body 
     */
    public checkNewCiclicalInterval(body?: models.CiclicalRequestDTO, extraHttpRequestParams?: any): Observable<models.CiclicalResultDTO> {
        return this.checkNewCiclicalIntervalWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Controlla se la ciclica puï¿½ essere sospesa
     * @summary checkSuspendCiclical
     * @param body 
     */
    public checkSuspendCiclical(body?: models.CiclicalRequestDTO, extraHttpRequestParams?: any): Observable<models.CiclicalResultDTO> {
        return this.checkSuspendCiclicalWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary filterTransports
     * @param body 
     */
    public ciclicals(body?: models.OverviewCiclicalFilterDTO, extraHttpRequestParams?: any): Observable<models.GenericResultDTO> {
        return this.ciclicalsWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Recupera i dati della prenotazione ciclica
     * @summary getCiclical
     * @param body 
     */
    public getCiclical(body?: models.CiclicalRequestDTO, extraHttpRequestParams?: any): Observable<models.CiclicalFullDTO> {
        return this.getCiclicalWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Recupera i dati strutturali della prenotazione ciclica
     * @summary getCiclicalPeriod
     * @param body 
     */
    public getCiclicalPeriod(body?: models.CiclicalRequestDTO, extraHttpRequestParams?: any): Observable<models.CiclicalRequestDTO> {
        return this.getCiclicalPeriodWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Rende una prenotazione ciclica
     * @summary makeBookingCiclical
     * @param body 
     */
    public makeBookingCiclical(body?: models.CiclicalRequestDTO, extraHttpRequestParams?: any): Observable<models.CiclicalResultDTO> {
        return this.makeBookingCiclicalWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Modifica i giorni della prenotazione ciclica
     * @summary modifyCiclicalDaysInfo
     * @param body 
     */
    public modifyCiclicalDaysInfo(body?: models.CiclicalRequestDTO, extraHttpRequestParams?: any): Observable<models.CiclicalFullDTO> {
        return this.modifyCiclicalDaysInfoWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Modifica i dati strutturali della prenotazione ciclica
     * @summary modifyCiclicalPeriod
     * @param body 
     */
    public modifyCiclicalPeriod(body?: models.CiclicalRequestDTO, extraHttpRequestParams?: any): Observable<models.CiclicalResultDTO> {
        return this.modifyCiclicalPeriodWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Cancella una prenotazione ciclica
     * @summary removeCiclical
     * @param body 
     */
    public removeCiclical(body?: models.CiclicalRequestDTO, extraHttpRequestParams?: any): Observable<models.CiclicalResultDTO> {
        return this.removeCiclicalWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Sospende o ripristina una prenotazione ciclica
     * @summary suspendResumeCiclical
     * @param body 
     */
    public suspendResumeCiclical(body?: models.CiclicalRequestDTO, extraHttpRequestParams?: any): Observable<models.CiclicalResultDTO> {
        return this.suspendResumeCiclicalWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * addCiclicalDaysInfo
     * Aggiunge un giorno alla ciclica
     * @param body 
     */
    public addCiclicalDaysInfoWithHttpInfo(body?: models.CiclicalRequestDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/ciclical/addCiclicalDaysInfo';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * checkNewCiclicalInterval
     * Controlla il nuovo intervallo di date della prenotazione ciclica
     * @param body 
     */
    public checkNewCiclicalIntervalWithHttpInfo(body?: models.CiclicalRequestDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/ciclical/checkNewCiclicalInterval';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * checkSuspendCiclical
     * Controlla se la ciclica puï¿½ essere sospesa
     * @param body 
     */
    public checkSuspendCiclicalWithHttpInfo(body?: models.CiclicalRequestDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/ciclical/checkSuspendCiclical';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * filterTransports
     * 
     * @param body 
     */
    public ciclicalsWithHttpInfo(body?: models.OverviewCiclicalFilterDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/ciclical/ciclicals';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getCiclical
     * Recupera i dati della prenotazione ciclica
     * @param body 
     */
    public getCiclicalWithHttpInfo(body?: models.CiclicalRequestDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/ciclical/getCiclical';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getCiclicalPeriod
     * Recupera i dati strutturali della prenotazione ciclica
     * @param body 
     */
    public getCiclicalPeriodWithHttpInfo(body?: models.CiclicalRequestDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/ciclical/getCiclicalPeriod';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * makeBookingCiclical
     * Rende una prenotazione ciclica
     * @param body 
     */
    public makeBookingCiclicalWithHttpInfo(body?: models.CiclicalRequestDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/ciclical/makeBookingCiclical';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * modifyCiclicalDaysInfo
     * Modifica i giorni della prenotazione ciclica
     * @param body 
     */
    public modifyCiclicalDaysInfoWithHttpInfo(body?: models.CiclicalRequestDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/ciclical/modifyCiclicalDaysInfo';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * modifyCiclicalPeriod
     * Modifica i dati strutturali della prenotazione ciclica
     * @param body 
     */
    public modifyCiclicalPeriodWithHttpInfo(body?: models.CiclicalRequestDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/ciclical/modifyCiclicalPeriod';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * removeCiclical
     * Cancella una prenotazione ciclica
     * @param body 
     */
    public removeCiclicalWithHttpInfo(body?: models.CiclicalRequestDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/ciclical/removeCiclical';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * suspendResumeCiclical
     * Sospende o ripristina una prenotazione ciclica
     * @param body 
     */
    public suspendResumeCiclicalWithHttpInfo(body?: models.CiclicalRequestDTO, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/secure/rest/ciclical/suspendResumeCiclical';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json;charset=UTF-8'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
