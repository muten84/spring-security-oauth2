import {
    ViewChild, ElementRef, Directive,
    Component, OnInit, OnDestroy, AfterViewInit, AfterContentChecked,
    ViewEncapsulation, ViewContainerRef, EventEmitter, Input, Output
} from '@angular/core';
import { ComponentHolderService, MiddleComponent } from '../service/shared-service';
import {
    BookingModuleServiceApi, OverviewBookingDTO,
    OverviewBookingFilterDTO, ChargeServiceApi, ChargeRequestFilter, BookingDTO, Value
} from '../../services/services.module';
import * as moment from 'moment';
import { MessageService, Subscription } from '../service/message.service';
import { DatatableComponent } from "@swimlane/ngx-datatable";
import { Router, ActivatedRoute, Params } from '@angular/router';
import { MenuItemValue } from '../../services/services.module'
import * as _ from 'lodash'
import { EVENTS } from '../util/event-type';
import { ContextMenuComponent, ContextMenuService } from 'ngx-contextmenu';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { NgbPanelChangeEvent, NgbModal, ModalDismissReasons, } from '@ng-bootstrap/ng-bootstrap';
import { BookingHistoryModalComponent } from './bookinghistory.component';
import { StaticDataService } from '../static-data/cached-static-data';
import { ClosingModalComponent } from "app/modals/closing-modal/closing-modal-component";
import { defIfEmpty, formatDate } from "../util/convert";
import { Observable } from 'rxjs/Observable';
import { valueToSelect } from 'app/util/convert';
import { convertMenuItem, decodeCompact2Sd, decodePhaseForDate } from 'app/util/sinottico-utils';
import { throttleable } from '@swimlane/ngx-datatable/release/utils';
import { TransportModuleServiceApi } from 'services/gen/api/TransportModuleServiceApi';
import { CiclicalBookingForVirtualServiceDTO } from 'services/gen/model/models';
import { Subscription as SubscriptionRxjs } from 'rxjs/Subscription';
import { getBookingImage } from 'app/util/sinottico-utils';
import { SelectBookingInSinottico, Type } from 'common/services/messages';
import { BrowserCommunicationService } from 'common/services/browser-communication.service';


@Component({
    selector: 'sinottico-prenotazioni',
    templateUrl: './sinottico-prenotazioni.html',
    styleUrls: ['sinottico-prenotazioni.scss']

})
export class SinotticoPrenotazioniComponent implements OnInit, MiddleComponent, OnDestroy, AfterViewInit, AfterContentChecked {

    /*    public items = [
          { name: 'John', otherProperty: 'Foo' },
          { name: 'Joe', otherProperty: 'Bar' }
      ];*/
    bookingSubscription: Subscription;

    @ViewChild(ContextMenuComponent) public rowMenu: ContextMenuComponent;

    @ViewChild(DatatableComponent) sinottico: DatatableComponent;

    selected = [];

    currentId;

    currentSelected = {
        optionItems: [],
        charge: ""
    }

    private filterSet: String;
    private filter: OverviewBookingFilterDTO;
    private filterToSave: OverviewBookingFilterDTO;
    private calculateChargeFlag = false;
    private defaultChargeValue = "n.d.";//"Calcolo preventivo...";


    private collapseSubscription: SubscriptionRxjs;


    timeout = undefined;
    rows = [];

    constructor(private sdSvc: StaticDataService,
        private modalService: NgbModal,
        private chargeService: ChargeServiceApi,
        private sanitizer: DomSanitizer,
        private contextMenuService: ContextMenuService,
        private router: Router,
        private messageService: MessageService,
        private componentService: ComponentHolderService,
        private transportService: TransportModuleServiceApi,
        private bookingService: BookingModuleServiceApi,
        protected bcs: BrowserCommunicationService) {
        /*   this.fetch((data) => {
             this.rows = data;
           });*/

    }

    /* fetch(cb) {
       const req = new XMLHttpRequest();
       req.open('GET', `assets/data/100k.json`);
   
       req.onload = () => {
         cb(JSON.parse(req.response));
       };
   
       req.send();
     }*/

    public searchBookings(): void {
        //console.log('Search bookings in ricerca prenotazioni-table: ' + this.filterToSave.toString());
        this.updateFilterSet();
        this.componentService.getRootComponent().mask();

        //sul refresh dei dati del sinottico invio l'evento al sinottico staccato
        this.sendMessageToSinottico({});

        this.bookingService.searchBookingByFilter(this.filterToSave).subscribe(result => {
            let cnt = 0;

            let list: OverviewBookingDTO[] = result ? result.resultList : [];
            //Luigi: esempio per colorazione sinottico da rimuovere quando arrierà dal backend...
            this.rows = list;

            let data = this.rows;
            if (data) {
                data.forEach(e => {
                    this.generateTableMenu(e);
                });
                this.rows = data;
            }

            //remove  value with n.d. value
            let emptyValue = "n.d.";
            if (data) {
                data.forEach(e => {
                    if (e.detail && e.detail.groups) {
                        e.detail.groups.forEach(d => {
                            if (d.values && d.values.length > 0) {
                                let newValues = [];
                                d.values.forEach(p => {
                                    if (emptyValue != p.value)
                                        newValues.push(p);
                                });
                                d.values = newValues;
                            }
                        });
                    }
                });
            }

            this.componentService.getRootComponent().unmask();

        });
    }

    private generateTableMenu(e) {
        e.optionItems = this.buildRowMenu(e.popupMenu, e.source);
        e.detail = {
            groups: [{
                "name": "Trasporto",
                "icon": "fa fa-ambulance",
                values: [{
                    "key": "Codice",
                    "value": e.code,
                }/*, {
                "key": "Tipo",
                "value": e.transportType,
            }*/, {
                    "key": "Fase",
                    "value": decodeCompact2Sd("PHASE", e.phase)
                }, {
                    "key": "Postazione",
                    "value": defIfEmpty(e.postazione)
                },
                {
                    "key": "Priorità",
                    "value": decodeCompact2Sd("PRIORITY", e.priority)
                }, {
                    "key": "Preventivo",
                    "value": this.defaultChargeValue //"Calcolo Preventivo...."
                }, {
                    "key": "Riferimento",
                    "value": defIfEmpty(e.riferimento)//"Calcolo Preventivo...."
                }, {
                    "key": "Convenzione",
                    "value": defIfEmpty(e.convention)//"Calcolo Preventivo...."
                },
                {
                    "key": "Attrezzature",
                    "value": defIfEmpty(e.attrezzature)
                }]
            },
            {
                "name": "Paziente",
                "icon": "fa-user-circle",
                values: [
                    {
                        "key": "Trasportato",
                        "value": defIfEmpty(e.denominazionePaziente)
                    },

                    /*{
                        "key": "Cognome",
                        "value": defIfEmpty( e.patientSurname )
                    },
                    {
                        "key": "Nome",
                        "value": defIfEmpty( e.patientName )
                    },*/
                    {
                        "key": "Accompagnato",
                        "value": defIfEmpty(e.patientCompare)
                    },
                    {
                        "key": "Deambulazione",
                        "value": e.patientStatus
                    }
                ]
            },
            {
                "name": "Itinerario",
                "icon": "fa-hospital-o",
                values: [{
                    "key": "Partenza",
                    "value": e.startAddress
                },
                {
                    "key": "Destinazione",
                    "value": e.endAddress
                },
                {
                    "key": "Prevede ritorno",
                    "value": this.formatReturnDateField(e.returnDate)
                }
                ]
            },
            {
                "name": "Informazioni Prenotazione",
                "icon": "fa-info",
                values: [
                    {
                        "key": "Archivio",
                        "value": e.source=='S' ? 'STORICO' : 'OnLine'
                    },
                    {
                    "key": "Prenotazione ciclica",
                    "value": e.ciclicalId ? 'SI' : 'NO'
                    }, {
                        "key": "Prenotazione di ritorno",
                        "value": e.bookingId ? e.returnReady ? 'SI (non risvegliata)': 'SI' : 'NO'
                    }, {
                    "key": "Note",
                    "value": defIfEmpty(e.note) //"Calcolo Preventivo...."
                }, {
                    "key": "Indicazioni",
                    "value": defIfEmpty(e.indicazioni) //"Calcolo Preventivo...."
                }, {
                    "key": "Creata il",
                    "value": e.creationDate
                }]
            }]
        };
    }


    updateFilterSet(): void {
        this.filterSet = "";
        if (this.filterToSave.allBookingFlag == true) {
            this.filterSet += "TUTTE" + "; "
        }
        if (this.filterToSave.todayBookingFlag == true) {
            this.filterSet += "OGGI" + "; "
        }
        if (this.filterToSave.tomorrowBookingFlag == true) {
            this.filterSet += "DOMANI" + "; "
        }
        if (this.filterToSave.fuoriBologna == true) {
            this.filterSet += "FUORI BOLOGNA" + "; "
        }
        if (this.filterToSave.intraOspFlag == true) {
            this.filterSet += "INTRA-H" + "; "
        }
        if (this.filterToSave.interOspFlag == true) {
            this.filterSet += "INTER-H" + "; "
        }
        if (this.filterToSave.fuoriBologna == true) {
            this.filterSet += "FUORI BO" + "; "
        }
        if (this.filterToSave.returnReady == true) {
            this.filterSet += "RITORNI" + "; "
        }
        if (this.filterToSave.transportDate != null) {
            let m = moment(this.filterToSave.transportDate);
            let formatDate = m.format('DD-MM-YYYY');
            this.filterSet += "DATA TRASPORTO:" + formatDate + "; ";
        }
        if (this.filterToSave.cyclicalBookingFlag == true) {
            this.filterSet += "PREN. CICLICHE" + "; "
        }
        if (this.filterToSave.startIntraOspFlag == true) {
            this.filterSet += "PART.INTRA-H" + "; "
        }
        if (this.filterToSave.startExtraOspFlag == true) {
            this.filterSet += "PART.NON-INTRA-H" + "; "
        }
        if (this.filterToSave.endIntraOspFlag == true) {
            this.filterSet += "DEST.INTRA-H" + "; "
        }
        if (this.filterToSave.endExtraOspFlag == true) {
            this.filterSet += "DEST.NON-INTRA-H" + "; "
        }
        if (this.filterToSave.codeList != null && this.filterToSave.codeList.length > 0) {
            this.filterSet += "CODICE:";
            this.filterToSave.codeList.forEach(element => {
                this.filterSet += element + ", ";
            });
            this.filterSet = this.filterSet.slice(0, length - 2);
            this.filterSet += "; ";
        }
        if (this.filterToSave.typeTxtList != null && this.filterToSave.typeTxtList.length > 0) {
            this.filterSet += "TIPO TRASP.:";
            this.filterToSave.typeTxtList.forEach(element => {
                this.filterSet += element + ", ";
            });
            this.filterSet = this.filterSet.slice(0, length - 2);
            this.filterSet += "; ";
        }
        if (this.filterToSave.conventionTxtList != null && this.filterToSave.conventionTxtList.length > 0) {
            this.filterSet += "CONV.:";
            this.filterToSave.conventionTxtList.forEach(element => {
                this.filterSet += element + ", ";
            });
            this.filterSet = this.filterSet.slice(0, length - 2);
            this.filterSet += "; ";
        }
        if (this.filterToSave.startAddressTxtList != null && this.filterToSave.startAddressTxtList.length > 0) {
            this.filterSet += "PART.:";
            this.filterToSave.startAddressTxtList.forEach(element => {
                this.filterSet += element + ", ";
            });
            this.filterSet = this.filterSet.slice(0, length - 2);
            this.filterSet += "; ";
        }
        if (this.filterToSave.endAddressTxtList != null && this.filterToSave.endAddressTxtList.length > 0) {
            this.filterSet += "DEST.:";
            this.filterToSave.endAddressTxtList.forEach(element => {
                this.filterSet += element + ", ";
            });
            this.filterSet = this.filterSet.slice(0, length - 2);
            this.filterSet += "; ";
        }
        if (this.filterToSave.patientSurnameTxtList != null && this.filterToSave.patientSurnameTxtList.length > 0) {
            this.filterSet += "COGN.TRASP.:";
            this.filterToSave.patientSurnameTxtList.forEach(element => {
                this.filterSet += element + ", ";
            });
            this.filterSet = this.filterSet.slice(0, length - 2);
            this.filterSet += "; ";
        }
        if (this.filterToSave.timeSlotList != null && this.filterToSave.timeSlotList.length > 0) {
            this.filterToSave.timeSlotList.forEach(element => {
                if (element == OverviewBookingFilterDTO.TimeSlotListEnum.AM) {
                    this.filterSet += "MATTINA" + ", ";
                }
                if (element == OverviewBookingFilterDTO.TimeSlotListEnum.PM) {
                    this.filterSet += "POMERIGGIO" + ", ";
                }
                if (element == OverviewBookingFilterDTO.TimeSlotListEnum.ND) {
                    this.filterSet += "ORARIO N.D." + ", ";
                }
            });
            this.filterSet = this.filterSet.slice(0, length - 2);
            this.filterSet += "; ";
        }
        this.filterSet.trim;
    }

    private formatReturnDateField(returnDate): string {
        let dataRitornoFlag = this.sdSvc.getConfigValueByKey('BOOKING_DATA_RITORNO', '0');
        dataRitornoFlag = dataRitornoFlag == '1';

        if (!dataRitornoFlag) {
            if (returnDate) {
                return 'SI';
            }
            return 'NO';
        }

        return defIfEmpty(formatDate(returnDate, 'DD-MM-YYYY HH:mm'))
    }

    private formatEquipmentList(eqList: Array<Value>): string {
        let list: string = '';
        if (eqList && eqList.length > 0) {
            eqList.forEach(element => {
                list += element.description + " - ";
            });
            if (list != '') {
                list = list.substring(0, list.length - 3);
            }
        }
        return defIfEmpty(list);
    }

    ngOnInit() {
        this.loadStaticData();
        this.bookingSubscription = this.messageService.subscribe(EVENTS.BOOKING);
        this.bookingSubscription.observ$.subscribe((msg) => {
            setTimeout(() => { //Gestione messaggio inserita in timeout per preservare la sottoscrizione al servizo in caso di errore
                console.log('received message from topic ' + msg.topic + " - " + JSON.stringify(msg));            
                this.elaboratePushMessage(msg);
            }, 0);//Chiudi timeout per preservare la sottoscrizione al servizo in caso di errore 
        });
    }

    loadStaticData() {

        let configValues = this.sdSvc.getConfigValueByKey('CHARGE_CALC', '0');
        if (configValues && configValues == '1') {
            this.calculateChargeFlag = true;
            this.defaultChargeValue = 'Calcolo Preventivo....';
        }


    }


    private elaboratePushMessage(msg) {
        if (msg.data.payload && msg.data.action) {
            let idServices: Array<string> = null;
            //lista di id dei servizi da allarmare
            idServices = msg.data.payload.split(",");
            switch (msg.data.action) {
                case "SWITCH_TO_RETURN":
                    //remove dalla coda booking nel caso di passaggio a coda ritorno
                    this.removeBooking(idServices);
                    break;
                case "ARCHIVE":
                    //se è un archiviazione lo tolgo
                    this.removeBooking(idServices);
                    break;
                case "UPDATE":
                // questo evento arriva sia su un update che su una creazione, 
                // faccio le stesse cose sull'alert
                case "ALERT":
                    // in caso di update o alert aggiorno i singoli servizi
                    this.reloadBookings(idServices);
                    break;
                case "SWITCH_TO_BOOKING":
                    // in caso di update o alert aggiorno i singoli servizi
                    this.reloadBookings(idServices);
                    break;
                default:
                    this.searchBookings();
                    break;
            }
        }
    }


    private removeBooking(idServices: Array<string>) {
        // filtro tutti gli elemendi del sinottico 
        this.rows = this.rows.filter(el => {
            //se l'elemento è presente nella lista degli id lo escludo
            let val = idServices.find(value => {
                return value == el.id;
            });
            return !val;
        });
    }

    private reloadBookings(idServices: Array<string>) {
        //copio il filter
        let filter = JSON.parse(JSON.stringify(this.filterToSave));
        //
        filter.ids = idServices;

        this.bookingService.searchBookingByFilter(filter).subscribe(result => {
            let cnt = 0;

            let list: OverviewBookingDTO[] = result ? result.resultList : [];

            if (list && list.length > 0) {
                list.forEach(e => {
                    this.generateTableMenu(e);
                    //sostituisco gli elementi o li aggiungo alla fine 
                    let index = this.rows.findIndex(r => {
                        return r.id === e.id;
                    });

                    if (index >= 0) {
                        this.rows[index] = e;
                    } else {
                        this.rows.push(e);
                    }
                    //svuoto la lista di id;
                    idServices = idServices.filter(id => {
                        return id !== e.id;
                    });
                });
            }
            if (idServices.length > 0) {
                // se è rimasto qualche id nella lista vuol dire che il booking non è stato caricato
                // provo a rimuoverlo dalla griglia
                this.removeBooking(idServices);
            }
            this.rows = _.orderBy(this.rows, ['transportDate', 'code'], ['asc', 'asc']);
        });
    }

    private ordinaAsc: boolean = true;
    private colonnaPrecedente: string = undefined;

    //Viene chiamato dopo  DatatableComponent.prototype.onColumnSort 
    onSort($event) {
        console.log('onSort');

        if ($event && $event.column) {

            let direzione: string = $event.newValue; //        "asc"       
            let proprieta = $event.column.prop;

            if (proprieta && this.sinottico && this.sinottico.sorts && this.sinottico.sorts.length > 0) {

                if (proprieta === "data") {

                    if (this.colonnaPrecedente && this.colonnaPrecedente === 'data') {
                        this.ordinaAsc = !this.ordinaAsc;
                    } else {
                        this.ordinaAsc = true;
                        this.colonnaPrecedente = 'data';
                    }

                    let direzioneOrdinamentoData = this.ordinaAsc ? 'asc' : 'desc';
                    //this.sinottico._rows = _.orderBy(this.sinottico._rows, ['transportDate'], [direzioneOrdinamentoData]);

                    this.sinottico._rows = _.orderBy(
                        this.sinottico._rows,
                        function (e) {
                            // console.log("Data di trasporto in formato stringa: ["+  e.transportDate+"]");
                            var dataTrasporto = moment(e.transportDate, 'DD-MM-YYYY HH:mm:ss');//.format('DD-MM-YYYY HH:mm:ss');
                            //  console.log("Data di trasporto: "+  dataTrasporto);
                            //  let m = moment(dataTrasporto);
                            //  let formatDate: string = m.format('YYYYMMDDHHmmss');
                            // console.log("Data di trasporto formattata: "+  formatDate);
                            // return formatDate
                            return dataTrasporto;
                        },
                        [direzioneOrdinamentoData]);

                } else if (proprieta === "trasportato") {
                    if (this.colonnaPrecedente && this.colonnaPrecedente === 'trasportato') {
                        this.ordinaAsc = !this.ordinaAsc;
                    } else {
                        this.ordinaAsc = true;
                        this.colonnaPrecedente = 'trasportato';
                    }

                    let direzioneOrdinamentoTrasportato = this.ordinaAsc ? 'asc' : 'desc';
                    //this.sinottico._rows = _.orderBy(this.sinottico._rows, ['denominazionePaziente'], [direzioneOrdinamentoTrasportato]);
                    this.sinottico._rows = _.orderBy(this.sinottico._rows, function (e) {
                        console.log("Data di trasporto: " + e.denominazionePaziente);
                        return e.denominazionePaziente
                    }, [direzioneOrdinamentoTrasportato]);


                } else {
                    this.ordinaAsc = true;
                    this.colonnaPrecedente = undefined;
                }
            }
        }
    }


    ngAfterViewInit(): void {
        //console.log('ngAfterViewInit');
        ////console.log('ngAfterViewInit: RicercaPrenotazioniTableComponent: ')
        this.componentService.setMiddleComponent('currentSearchTable', this);

        // Partenza automatica della ricerca sinottico con i parametri di dafault
        let currentFilter = sessionStorage.getItem("bookingFilter");
        let filterDefault: OverviewBookingFilterDTO;
        if (currentFilter) {
            filterDefault = JSON.parse(currentFilter);
            this.filterToSave = filterDefault;
            this.updateFilterSet();
        } else {
            filterDefault = { todayBookingFlag: true };
        }
        setTimeout(() => this.triggerSubmit(filterDefault), 100);

        this.collapseSubscription = this.componentService.getRootComponent().collapseMenu.subscribe(e => {
            //console.log("collapse " + e);
            this.recalculate();
        });


    }

    public recalculate() {
        setTimeout(() => {
            this.sinottico.recalculate();
        }, 500);
    }

    ngAfterViewChecked() {
        //console.log('ngAfterViewChecked');
    }

    ngOnDestroy() {
        //console.log('ngOnDestroy');
        this.bookingSubscription.observ$.unsubscribe();

        this.collapseSubscription.unsubscribe();
        //svuoto il servizio selezionato
        this.sendMessageToSinottico({});
        ////console.log("sinottico destroyed")
    }

    ngAfterContentChecked() {
        //console.log('ngAfterContentChecked');
    }

    triggerSubmit(filterInput: any) {
        //console.log('triggerSubmit');
        if (filterInput != null) {
            this.filter = filterInput;
            /*aggiorno qui il filtro perché è l'ultima ricerca che ha avviato*/
            sessionStorage.setItem("bookingFilter", JSON.stringify(this.filter));
            this.filterToSave = JSON.parse(JSON.stringify(this.filter));
            if (filterInput.transportDate != null) {
                this.filterToSave.transportDate = new Date(filterInput.transportDate['year'], filterInput.transportDate['month'] - 1, filterInput.transportDate['day']);
            }
        }

        this.searchBookings();

    }

    fetchComponentData() {
        //console.log('fetchComponentData');
    }


    buildRowMenu(menuItems: MenuItemValue[], source) {
        //console.log('buildRowMenu');
        let optionItems = this.createDefaultMenu(source);
        if (menuItems && menuItems.length > 0) {
            menuItems.forEach((mi) => {
                optionItems.push(convertMenuItem(mi));

            });
        }
        return _.sortBy(optionItems, "position");
    }

    createDefaultMenu(source) {
        //console.log('createDefaultMenu');
        let optionItems = [];
        let mi: MenuItemValue = {
            enable: true,
            id: "modifybooking",
            name: "Modifica Prenotazione",
            position: 0

        }
        let viewBook: MenuItemValue = {
            enable: true,
            id: "viewbooking",
            name: "Dati Prenotazione",
            position: 0

        }
        if(source && source=='S'){
            optionItems.push(convertMenuItem(viewBook));
        }else{
            optionItems.push(convertMenuItem(mi));
        }
            
        return optionItems;
    }

    onPage(event) {
        //console.log('onPage');
        clearTimeout(this.timeout);
        this.timeout = setTimeout(() => {
            // //console.log('paged!', event);
        }, 100);
    }

    toggleExpandRow(row) {
        //console.log('toggleExpandRow');
        //  //console.log('Toggled Expand Row!', row);
        let expand = !this.sinottico.bodyComponent.getRowExpanded(row);
        this.sinottico.rowDetail.collapseAllRows();
        if (expand) {
            this.sinottico.rowDetail.toggleExpandRow(row);
        }

    }

    onDetailToggle(event) {
        //console.log('onDetailToggle');
        //   //console.log('Detail Toggled', event);
        let detRow: any = this.currentSelected;
        this.changeCurrentCharge(detRow, this.defaultChargeValue);
    }

    onSelect({ selected }) {
        //console.log('onSelect');
        // //console.log('Select Event', selected, this.selected);

        this.currentSelected = selected[0];
        /*Luigi: dichiaro tutto con i tipi così sono sicuro che quello che passo in input
        e' coerente con il backend*/
        let currentBooking: OverviewBookingDTO = <OverviewBookingDTO>this.currentSelected;
        let id = currentBooking.id;

        this.sendMessageToSinottico(currentBooking);

        if (this.currentId == id) {
            return;
        }
        this.currentId = id;
        //Il calcolo del costo deve essere regolato da un parametro di configurazione
        if (this.calculateChargeFlag && this.calculateChargeFlag == true) {
            this.calculateCharge(id);
        }
    }

    sendMessageToSinottico(currentBooking: OverviewBookingDTO) {
        // invio l'id al sinottico staccato se è aperto
        let param: SelectBookingInSinottico = {
            bookingCode: currentBooking.code,
            bookingId: currentBooking.id
        }
        this.bcs.postMessage(Type.APP2_SET_CURRENT_BOOKING, param, "*");
    }

    calculateCharge(id) {
        //console.log('calculateCharge');
        let detRow: any = this.currentSelected;
        this.changeCurrentCharge(detRow, this.defaultChargeValue);
        this.bookingService.getBookingById(id).subscribe(val => {

            let result: any = val.result;
            let request: ChargeRequestFilter = {

                origin: {
                    municipality: result.startAddress.municipality.name,
                    province: result.startAddress.province.name
                },
                destination: {
                    municipality: result.endAddress.municipality.name,
                    province: result.endAddress.province.name
                }

            }
            this.chargeService.computeCharge(request).subscribe(response => {
                let detRow: any = this.currentSelected;
                this.changeCurrentCharge(detRow, this.defaultChargeValue);
                if (this.currentId == result.id) {
                    if (!response.result) {
                        this.changeCurrentCharge(detRow, "Calcolo preventivo non possibile");
                        return;
                    }
                    this.currentSelected.charge = "" + response.result.cost;

                    let found = false;

                    found = this.changeCurrentCharge(detRow, this.currentSelected.charge);

                } else {
                    let detRow: any = this.currentSelected;
                    this.currentSelected.charge = this.defaultChargeValue;
                    this.changeCurrentCharge(detRow, this.currentSelected.charge);
                }
            })
        });
    }

    changeCurrentCharge(row, charge) {
        //console.log('changeCurrentCharge');
        let found = false;
        row.detail.groups.forEach(e => {
            if (e.name === "Trasporto") {
                e.values.forEach(v => {
                    if (v.key === "Preventivo") {
                        v.value = charge;
                    }
                });
                found = true;
                return;
            }
        });
        return found;
    }

    collpseAllRows() {
        //console.log('collpseAllRows');
        this.sinottico.rowDetail.collapseAllRows();
    }

    onActivate(event) {
        //console.log('onActivate');
        // //console.log('Activate Event', event);
        this.currentSelected = event.row;


    }


    public onOptionItemClicked(row: any, source: string, enabled: boolean, event): any {
        //console.log('onOptionItemClicked');
        if (enabled) {
            /*this.optionItemClicked.emit({ row, column, source });*/
            //console.log('onOptionItemClicked: ' + source + " - " + row.id);
            let src = source.toLowerCase();
            switch (src) {
                case "viewbooking":
                //in questo caso apri cmq il dettaglio prenotazione ... in base a valore 'source' si gestisce la possibilità di modifica dei dati 
                case "modifybooking":
                    let param = { id: row.id, serviceCode: null, serviceId: null };
                    let source ='1';
                    if(row.source && row.source=="S") source ='S'; // 0 = storico
                    this.router.navigate(['/modifica-prenotazione', source, row.id]);//,{queryParams:{ serviceCode: '1', serviceId:'2'}}
                    return;
                case "aggiungi_ai_mezzi":
                    this.router.navigate(['/mezzi-attivi', row.id]);//,{queryParams:{ serviceCode: '1', serviceId:'2'}}
                    return;
                case "show_history":
                    this.showBookingHistory(row.id);
                    return;
                case "crea_servizio":
                    this.makeService(row);
                    return;
                case 'popup_elimina_prenotazione':
                    let modal = this.modalService.open(ClosingModalComponent, { size: 'sm' });
                    modal.componentInstance.id = row.id;
                    modal.result.then((result) => {
                        ////console.log("modal result is: " + result);
                        if (result) {
                            // se l'utente ha chiuso la prenotazione, ricarico il sinottico
                            this.searchBookings()
                        }
                    }, (reason) => {
                    });
                    return;
                case "archive_booking":
                    this.archiveBooking(row.id);
                    return;
                case 'multiple_duplicate':
                    this.router.navigate(['/duplica-multipla-prenotazioni', row.id]);
                    return;
                case 'popup_rendi_ciclica':
                    this.router.navigate(['/intervallo-cicliche', row.id]);
                    return;

                case 'move_to_returns':
                    this.moveToReturn(row.id);
                    return;
            }
        }
        /*else {
            event.stopPropagation();
        }*/

    }

    makeService(row: OverviewBookingDTO) {
        let model = {
            bookingId: row.id,
            ciclicalId: "",
            transportDate: (<any>row.transportDate),
        };
        this.transportService.getCiclicalBookingForVirtualService(model).subscribe(res => {
            if (res && res.length > 0) {
                console.log("Devi creare modale");
                //TODO
                // far apparire una popup per selezionare le cicliche da utilizzare nella creazione del servizio virtuale
            } else {
                this.createService(row);
            }
        });
    }

    moveToReturn(id:string){
        if(id!=null){
            let body = {bookingId:id};
            this.componentService.getRootComponent().showConfirmDialog('Attenzione', "Si desidera confermare l'operazione?").then((result) => {
                this.componentService.getRootComponent().mask();
                this.bookingService.switchBookingReturn(body).subscribe(res => {
                    if(res.removedBookingId){
                        this.componentService.getRootComponent().showToastMessage('success', 'Prenotazione con codice ' + res.bookingCode + ' ri-trasferito nella coda di ritorno.' );
                        let idBookings :Array<string> =[res.removedBookingId];
                        this.removeBooking(idBookings);
                        this.componentService.getRootComponent().unmask();
                    }
                });
            }, (reason) => {
                console.log("L'elemento resta come ritorno");
                this.componentService.getRootComponent().unmask();
            });
        }     
    }

    createService(row: OverviewBookingDTO, cicliche?: [CiclicalBookingForVirtualServiceDTO]) {

        let listId;

        if (cicliche) {
            listId = cicliche.map(el => {
                return el.id;
            });
        } else {
            listId = [];
        }

        listId.push(row.id);

        let model = {
            bookingIdList: listId,
            bookingFlag: false,
            closedStatus: false,
        };
        this.componentService.getRootComponent().mask();
        this.transportService.createService(model).subscribe(res => {
            // this.router.navigate(['/sinottico-servizi']);
            // ricarico la lista dei bookings
            this.searchBookings();
            this.componentService.getRootComponent().showToastMessage('success', "Il servizo '" + res.result.code + "' è stato creato!");
            this.componentService.getRootComponent().unmask();
        });
    }

    showBookingHistory(id) {
        //console.log('showBookingHistory');
        this.componentService.getRootComponent().mask();
        this.bookingService.getBookingHistoryById(id).subscribe(res => {
            //console.log("history result: " + JSON.stringify(res));
            this.componentService.getRootComponent().unmask();
            let modal = this.modalService.open(BookingHistoryModalComponent, { size: 'lg' });

            modal.componentInstance.list = res;
            modal.componentInstance.title = 'Storico modifiche prenotazione';
            modal.componentInstance.columns = [
                { title: 'Data', name: 'modificationDate' },
                { title: 'Operatore', name: 'operator' },
                { title: 'Modifica', name: 'modificationSynthesis' },
            ];
            return modal;
        })
    }

    public onContextMenu($event: MouseEvent, item: any): void {
        //console.log('onContextMenu');
        this.contextMenuService.show.next({
            // Optional - if unspecified, all context menu components will open
            contextMenu: this.rowMenu,
            event: $event,
            item: item,
        });
        $event.preventDefault();
        $event.stopPropagation();
    }

    getRowClass(row: OverviewBookingDTO) {
        //console.log('getRowClass');
        ////console.log("rowclass: " + row.rowStyle.foreground);
        let rt = {
            'row-foreground-green': row.rowStyle.foreground.toLowerCase() === 'green',
            'row-foreground-yellow': row.rowStyle.foreground.toLowerCase() === 'yellow',
            'row-foreground-red': row.rowStyle.foreground.toLowerCase() === 'red',
            'row-background-pink': row.rowStyle.foreground.toLowerCase() === 'pink',
        }
        // //console.log(JSON.stringify(rt));
        return rt;
    }

    getCellClass(cell) {
        //console.log('getCellClass');
        /* //console.log("getCellClass: " + JSON.stringify(cell));
         let row = cell.row;
         let rt = {
             'row-foreground-green': row.rowStyle.foreground.toLowerCase() === 'green'
 
         }
         //console.log(JSON.stringify(rt));
         return rt;*/
    }

    contains(pattern, val): boolean {
        ////console.log('contains');
        let matchResult = pattern.toLowerCase().match(val);
        if (matchResult) {
            return matchResult.length > 0
        }
        return false;
    }

    getBookingImage(pattern: string, ciclicalId: string, source:string) {
        return getBookingImage(pattern, ciclicalId, source);
    }

    public sanitize(html: string): SafeHtml {
        return this.sanitizer.bypassSecurityTrustHtml(html);
    }


    public decodePhaseForDate(phase: string, date: string) {
        return decodePhaseForDate(phase, date);
    }

    protected truncHour(transportDate: string) {
        return transportDate.substr(0, 10);
    }

    protected archiveBooking(idBooking: string) {
        if (!idBooking || idBooking.length == 0)
            this.componentService.getRootComponent().showToastMessage('error', 'Identificativo prenotazione selezioonata non valido!');
        // verifica id e richiedi la conferma per l'archiviazione       
        this.componentService.getRootComponent().showConfirmDialog('Attenzione!', "Archiviare la prenotazione selezionare?").then((result) => {
            this.componentService.getRootComponent().mask();
            let model = {
                bookingId: idBooking
            };
            this.transportService.archiveBooking(model).subscribe(res => {
                this.componentService.getRootComponent().showToastMessage('success', 'Archiviato con servizio ' + res.service.code);
                this.searchBookings();
            })
        }, (reason) => {
            console.log("Archiviazione non effettuata " + reason);
            this.componentService.getRootComponent().unmask();
        });
    }
    /* public optionItemClick(row: any, column: any, source: any, enabled: boolean, event): void {
            if (enabled) {
                this.optionItemClicked.emit({ row, column, source });
            else {
                event.stopPropagation();
            }
        }*/

}
