import {
  Input, Directive, OnInit,
  ElementRef, ViewChild, HostBinding,
  forwardRef, Renderer2, Injector,
  OnDestroy, ComponentFactoryResolver,
  ViewContainerRef, NgZone
} from '@angular/core';

import {
  NgControl, AbstractControl
} from '@angular/forms';

import { FormGroupGeneratorService } from '../service/form-group-generator.service';
import { Config } from '../model/model';

import { NgbTooltipConfig } from '@ng-bootstrap/ng-bootstrap/tooltip/tooltip-config';
import { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';

@Directive({
  selector: '[validationMessage]'
})
export class ValidationMessageDirective implements OnInit, OnDestroy {

  ngbTooltip: NgbTooltip;

  conf: Config;

  constructor(
    private el: ElementRef,
    private control: NgControl,
    _renderer: Renderer2,
    injector: Injector,
    componentFactoryResolver: ComponentFactoryResolver,
    viewContainerRef: ViewContainerRef,
    config: NgbTooltipConfig,
    ngZone: NgZone
  ) {
    this.ngbTooltip = new NgbTooltip(el, _renderer, injector, componentFactoryResolver, viewContainerRef, config, ngZone);
  }

  ngOnDestroy() {
    if (this.ngbTooltip) {
      this.ngbTooltip.ngOnDestroy();
    }
  }

  ngOnInit() {
    this.ngbTooltip.ngOnInit();
    //cambio di stato del form control
    this.control.statusChanges.subscribe((state) => {
      this.changeStatus();
      // if (this.control.invalid) {
      //    this.ngbTooltip.open();
      //  }
    });
    if (this.control.invalid) {
      this.changeStatus();
    }
  }

  changeStatus() {
    if (this.ngbTooltip.isOpen) {
      this.ngbTooltip.close();
    }

    let message = "";
    if (this.control.errors && this.control.errors["message"]) {
      message += this.control.errors["message"];
    }
    this.ngbTooltip.ngbTooltip = message;

  }
}
