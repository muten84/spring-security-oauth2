/**
 * Swagger Maven Plugin Sample
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CrewMemberDTO } from '../model/crewMemberDTO';
import { CrewMemberFilterDTO } from '../model/crewMemberFilterDTO';
import { ErrorMessage } from '../model/errorMessage';
import { GenericMessageDTO } from '../model/genericMessageDTO';
import { GenericResultDTO } from '../model/genericResultDTO';
import { OverviewTurnFilterDTO } from '../model/overviewTurnFilterDTO';
import { SearchTurnResultDTO } from '../model/searchTurnResultDTO';
import { StaticDataFilterDTO } from '../model/staticDataFilterDTO';
import { TaskDTO } from '../model/taskDTO';
import { TurnCrewMembersDTO } from '../model/turnCrewMembersDTO';
import { TurnDTO } from '../model/turnDTO';
import { TurnRequestDTO } from '../model/turnRequestDTO';
import { TurnResultDTO } from '../model/turnResultDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TurnModuleServiceService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * changeAvailability
     * Sospende o riattiva un turno
     * @param turnRequestDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public changeAvailability(turnRequestDTO?: TurnRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<TurnResultDTO>;
    public changeAvailability(turnRequestDTO?: TurnRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TurnResultDTO>>;
    public changeAvailability(turnRequestDTO?: TurnRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TurnResultDTO>>;
    public changeAvailability(turnRequestDTO?: TurnRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TurnResultDTO>(`${this.basePath}/api/secure/rest/turn/changeAvailability`,
            turnRequestDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * changePause
     * Mette in pausa o toglie dalla pausa un turno
     * @param turnRequestDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public changePause(turnRequestDTO?: TurnRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<TurnResultDTO>;
    public changePause(turnRequestDTO?: TurnRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TurnResultDTO>>;
    public changePause(turnRequestDTO?: TurnRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TurnResultDTO>>;
    public changePause(turnRequestDTO?: TurnRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TurnResultDTO>(`${this.basePath}/api/secure/rest/turn/changePause`,
            turnRequestDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * exportTurnByFilter
     * Esporta in excel i turni con i filtri passati in input
     * @param overviewTurnFilterDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportTurnByFilter(overviewTurnFilterDTO?: OverviewTurnFilterDTO, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public exportTurnByFilter(overviewTurnFilterDTO?: OverviewTurnFilterDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public exportTurnByFilter(overviewTurnFilterDTO?: OverviewTurnFilterDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public exportTurnByFilter(overviewTurnFilterDTO?: OverviewTurnFilterDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/secure/rest/turn/exportTurnByFilter`,
            overviewTurnFilterDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getTurn
     * Recupera il turno
     * @param turnRequestDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTurn(turnRequestDTO?: TurnRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<TurnResultDTO>;
    public getTurn(turnRequestDTO?: TurnRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TurnResultDTO>>;
    public getTurn(turnRequestDTO?: TurnRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TurnResultDTO>>;
    public getTurn(turnRequestDTO?: TurnRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TurnResultDTO>(`${this.basePath}/api/secure/rest/turn/getTurn`,
            turnRequestDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getTurnCrewMembersByTurnId
     * Recupera l&#39;equipaggio di uno specifico turno
     * @param turnRequestDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTurnCrewMembersByTurnId(turnRequestDTO?: TurnRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<TurnCrewMembersDTO>;
    public getTurnCrewMembersByTurnId(turnRequestDTO?: TurnRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TurnCrewMembersDTO>>;
    public getTurnCrewMembersByTurnId(turnRequestDTO?: TurnRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TurnCrewMembersDTO>>;
    public getTurnCrewMembersByTurnId(turnRequestDTO?: TurnRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TurnCrewMembersDTO>(`${this.basePath}/api/secure/rest/turn/getTurnCrewMembersByTurnId`,
            turnRequestDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * insertTurn
     * Inserisce un nuovo turno
     * @param turnDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public insertTurn(turnDTO?: TurnDTO, observe?: 'body', reportProgress?: boolean): Observable<TurnResultDTO>;
    public insertTurn(turnDTO?: TurnDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TurnResultDTO>>;
    public insertTurn(turnDTO?: TurnDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TurnResultDTO>>;
    public insertTurn(turnDTO?: TurnDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TurnResultDTO>(`${this.basePath}/api/secure/rest/turn/insertTurn`,
            turnDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * insertTurnCrewMember
     * Inserisce un nuovo componente dell&#39;equipaggio del turno
     * @param turnCrewMembersDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public insertTurnCrewMember(turnCrewMembersDTO?: TurnCrewMembersDTO, observe?: 'body', reportProgress?: boolean): Observable<TurnCrewMembersDTO>;
    public insertTurnCrewMember(turnCrewMembersDTO?: TurnCrewMembersDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TurnCrewMembersDTO>>;
    public insertTurnCrewMember(turnCrewMembersDTO?: TurnCrewMembersDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TurnCrewMembersDTO>>;
    public insertTurnCrewMember(turnCrewMembersDTO?: TurnCrewMembersDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TurnCrewMembersDTO>(`${this.basePath}/api/secure/rest/turn/insertTurnCrewMember`,
            turnCrewMembersDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * loadCrewMembers
     * Recupera i nominativi dell&#39;equipaggio filtrati per i dati presenti in input
     * @param crewMemberFilterDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loadCrewMembers(crewMemberFilterDTO?: CrewMemberFilterDTO, observe?: 'body', reportProgress?: boolean): Observable<Array<CrewMemberDTO>>;
    public loadCrewMembers(crewMemberFilterDTO?: CrewMemberFilterDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CrewMemberDTO>>>;
    public loadCrewMembers(crewMemberFilterDTO?: CrewMemberFilterDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CrewMemberDTO>>>;
    public loadCrewMembers(crewMemberFilterDTO?: CrewMemberFilterDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<CrewMemberDTO>>(`${this.basePath}/api/secure/rest/turn/loadCrewMembers`,
            crewMemberFilterDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * removeTurn
     * Cancella un turno
     * @param turnRequestDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeTurn(turnRequestDTO?: TurnRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<TurnResultDTO>;
    public removeTurn(turnRequestDTO?: TurnRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TurnResultDTO>>;
    public removeTurn(turnRequestDTO?: TurnRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TurnResultDTO>>;
    public removeTurn(turnRequestDTO?: TurnRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TurnResultDTO>(`${this.basePath}/api/secure/rest/turn/removeTurn`,
            turnRequestDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * removeTurnCrewMember
     * Cancella un membro dall&#39;equipaggio del turno
     * @param turnRequestDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeTurnCrewMember(turnRequestDTO?: TurnRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<TurnResultDTO>;
    public removeTurnCrewMember(turnRequestDTO?: TurnRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TurnResultDTO>>;
    public removeTurnCrewMember(turnRequestDTO?: TurnRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TurnResultDTO>>;
    public removeTurnCrewMember(turnRequestDTO?: TurnRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TurnResultDTO>(`${this.basePath}/api/secure/rest/turn/removeTurnCrewMember`,
            turnRequestDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param staticDataFilterDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchStaticDataByFilter(staticDataFilterDTO?: StaticDataFilterDTO, observe?: 'body', reportProgress?: boolean): Observable<GenericResultDTO>;
    public searchStaticDataByFilter(staticDataFilterDTO?: StaticDataFilterDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResultDTO>>;
    public searchStaticDataByFilter(staticDataFilterDTO?: StaticDataFilterDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResultDTO>>;
    public searchStaticDataByFilter(staticDataFilterDTO?: StaticDataFilterDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<GenericResultDTO>(`${this.basePath}/api/secure/rest/turn/searchStaticDataByFilter`,
            staticDataFilterDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchTurnByFilter
     * Permette di cercare i turni con i filtri passati in input
     * @param overviewTurnFilterDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchTurnByFilter(overviewTurnFilterDTO?: OverviewTurnFilterDTO, observe?: 'body', reportProgress?: boolean): Observable<SearchTurnResultDTO>;
    public searchTurnByFilter(overviewTurnFilterDTO?: OverviewTurnFilterDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SearchTurnResultDTO>>;
    public searchTurnByFilter(overviewTurnFilterDTO?: OverviewTurnFilterDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SearchTurnResultDTO>>;
    public searchTurnByFilter(overviewTurnFilterDTO?: OverviewTurnFilterDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SearchTurnResultDTO>(`${this.basePath}/api/secure/rest/turn/searchTurnByFilter`,
            overviewTurnFilterDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param code 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public selectConvention118(code: string, observe?: 'body', reportProgress?: boolean): Observable<GenericResultDTO>;
    public selectConvention118(code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResultDTO>>;
    public selectConvention118(code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResultDTO>>;
    public selectConvention118(code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling selectConvention118.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (code !== undefined && code !== null) {
            queryParameters = queryParameters.set('code', <any>code);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<GenericResultDTO>(`${this.basePath}/api/secure/rest/turn/selectConvention118`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public selectSanitaryCategory118Web(observe?: 'body', reportProgress?: boolean): Observable<GenericResultDTO>;
    public selectSanitaryCategory118Web(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResultDTO>>;
    public selectSanitaryCategory118Web(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResultDTO>>;
    public selectSanitaryCategory118Web(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<GenericResultDTO>(`${this.basePath}/api/secure/rest/turn/selectSanitaryCategory118Web`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * selectTask
     * Recupera i task dell&#39;equipaggio
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public selectTask(observe?: 'body', reportProgress?: boolean): Observable<Array<TaskDTO>>;
    public selectTask(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TaskDTO>>>;
    public selectTask(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TaskDTO>>>;
    public selectTask(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<Array<TaskDTO>>(`${this.basePath}/api/secure/rest/turn/selectTask`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateTurn
     * Aggiorna il turno passato come parametro
     * @param turnDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTurn(turnDTO?: TurnDTO, observe?: 'body', reportProgress?: boolean): Observable<TurnResultDTO>;
    public updateTurn(turnDTO?: TurnDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TurnResultDTO>>;
    public updateTurn(turnDTO?: TurnDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TurnResultDTO>>;
    public updateTurn(turnDTO?: TurnDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TurnResultDTO>(`${this.basePath}/api/secure/rest/turn/updateTurn`,
            turnDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateTurnCrewMember
     * Aggiorna il componente dell&#39;equipaggio del turno
     * @param turnCrewMembersDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTurnCrewMember(turnCrewMembersDTO?: TurnCrewMembersDTO, observe?: 'body', reportProgress?: boolean): Observable<TurnCrewMembersDTO>;
    public updateTurnCrewMember(turnCrewMembersDTO?: TurnCrewMembersDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TurnCrewMembersDTO>>;
    public updateTurnCrewMember(turnCrewMembersDTO?: TurnCrewMembersDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TurnCrewMembersDTO>>;
    public updateTurnCrewMember(turnCrewMembersDTO?: TurnCrewMembersDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TurnCrewMembersDTO>(`${this.basePath}/api/secure/rest/turn/updateTurnCrewMember`,
            turnCrewMembersDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
