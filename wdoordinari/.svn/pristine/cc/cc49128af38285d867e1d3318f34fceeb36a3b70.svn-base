import {
    Component, ViewEncapsulation,
    OnInit, ViewChild
} from "@angular/core";
import { ComponentHolderService } from "app/service/shared-service";
import { TurnModuleServiceApi,  TurnDTO, OverviewTurnFilterDTO, TurnRequestDTO} from "services/services.module";
import { Router, ActivatedRoute } from "@angular/router";
import { SinotticoTurniHeaderComponent } from "app/sinottico-turni/sinottico-turni-header.component";
import { throttleable } from "@swimlane/ngx-datatable/release/utils";
import { StaticDataService } from "app/static-data/cached-static-data";
import { NgbModal } from "@ng-bootstrap/ng-bootstrap";
import * as moment from 'moment';
import { CoreTableColumn, CoreTableComponent } from "app/core/table/core-table/core-table.component";
import { ServiceCommon } from "app/common-servizi/service-common";
import { MessageService, Subscription } from '../service/message.service';
import { Subscription as SubscriptionRxjs } from 'rxjs/Subscription';
import { EVENTS } from '../util/event-type';
import { convertToDate, convertMomentDateToStruct } from "app/util/convert";
import { NgbDateStruct } from "@ng-bootstrap/ng-bootstrap/datepicker/ngb-date-struct";
import { TurnModalComponent } from "../modals/turn-modal/turn-modal-component";
import { TokenService } from '../service/token.service';


function execute(context: any, funct: { (obj: any): any }): { (obj: any): any } {
    return function (obj: any) {
        return funct.call(context, obj);
    }
}


@Component({
    selector: 'sinottico-turni',
    templateUrl: './sinottico-turni-component.html',
    styleUrls: ['./sinottico-turni-component.scss'],
    encapsulation: ViewEncapsulation.None,
})



export class SinotticoTurniComponent implements OnInit {


    turnSubscription: Subscription;
       
    // turno selezionata
    public turnSelected: TurnDTO;

    private filterSet: String;
    private filter: OverviewTurnFilterDTO;
    private filterToSave: OverviewTurnFilterDTO;
    private collapseSubscription: SubscriptionRxjs;
    //private initDateToSet : any;
    private today: NgbDateStruct;

    public listTurni = [];

    private vehicleTurnPause : boolean;
    private integration118web : boolean;
    private currentUser;


    constructor(
        private componentService: ComponentHolderService,
        private route: ActivatedRoute,
        private sdSvc: StaticDataService,
        private modalService: NgbModal,
        private staticService: StaticDataService,
        private router: Router,
        private serviceCommon: ServiceCommon,
        private turniService: TurnModuleServiceApi,
        private messageService: MessageService,
        private tokenService: TokenService
        
    ) { 
        
    }

    public ngOnInit() {
        //recupero l'utente loggato
        if (!this.getCurrentUser()) {
            console.log("ATTENZIONE! Utente non recuperato da token");
        }
        //leggo variabile di configurazione
        this.vehicleTurnPause = this.staticService.get118Config('VehicleTurnPauseNote','FALSE') === 'TRUE';
        this.integration118web = this.staticService.getTSConfig('Integration118Web','FALSE') === 'TRUE';
        this.today = convertMomentDateToStruct(moment(new Date()));
        //let displayDate = new Date();
        //displayDate.setUTCHours(0, 0, 0);
        //this.initDateToSet = { day: displayDate.getUTCDate(), month: displayDate.getUTCMonth() + 1, year: displayDate.getUTCFullYear() };
        //se ricevo un messaggio di un evento dei turni aggiorno la griglia
        this.turnSubscription = this.messageService.subscribe(EVENTS.TURN);
        this.turnSubscription.observ$.subscribe((msg) => {
            setTimeout(() => { //Gestione messaggio inserita in timeout per preservare la sottoscrizione al servizo in caso di errore
                console.log('received message from topic ' + msg.topic + " - " + JSON.stringify(msg));            
                this.elaboratePushMessage(msg);
            }, 0);//Chiudi timeout per preservare la sottoscrizione al servizo in caso di errore 
        });
    }

    ngOnDestroy() {
        this.turnSubscription.observ$.unsubscribe();
        this.collapseSubscription.unsubscribe();
    }

    fetchComponentData() {
        //console.log('fetchComponentData');
    }

    public getCurrentUser() {
        this.currentUser = this.tokenService.getUserName();
        if (this.currentUser) {
            console.log("################## CURRENT_USER:" + this.currentUser);
            return true;
        } else {
            return false;
        }
    }

    

    //griglia del sinottico
    public columnsTurniTable: Array<CoreTableColumn> = [
        { title: 'Mezzo', name: 'vehicleCode', sort: 'asc', style: { "flex-grow": "10", } },
        { title: 'Postazione', name: 'parkingCode', style: { "flex-grow": "10", } },
        { title: 'Inizio Turno', name: 'startTurnDateString', style: { "flex-grow": "8" } },
        { title: 'Fine turno', name: 'endTurnDateString', style: { "flex-grow": "8" } },
        {
            title: '', name: '', index: 6, optionTitle: 'vehicleCode', options: [
                {
                    name: 'Crea un nuovo turno',
                    icon: 'fa fa-floppy-o',
                    //clicked: execute(this, this.removeTurn)
                } ,{
                    name: 'Aggiorna il turno selezionato',
                    //icon: 'fa fa-calendar-check-o',
                    icon: 'fa fa-floppy-o',
                    //clicked: execute(this, this.removeTurn)
                }, {
                    name: 'Sospende/Riattiva il turno selezionato',
                    //icon: 'fa fa-pencil',
                    icon: 'fa fa-clock-o',
                    clicked: execute(this, this.changeAvailabilityTurn)
                }, {
                    name: 'Pausa del turno selezionato',
                    icon: 'fa fa-clock-o',
                    clicked: execute(this, this.changePauseTurn)
                }, {
                    name: 'Cancella il turno selezionato',
                    //icon: 'fa fa-info-circle',
                    icon: 'fa fa-trash',
                    clicked: execute(this, this.removeTurn)
                }, {
                    name: 'Imposta il turno dell\'equipaggio sul mezzo in turno selezionato',
                    icon: 'fa fa-plus-circle',
                    //clicked: execute(this, this.removeTurn)
                }, {
                    name: 'Export Turni',
                    icon: 'fa fa-plus-circle',
                    //clicked: execute(this, this.removeTurn)
                }
            ], style: { "flex-grow": "3" }
        }
    ];

    public configTurniTable = {
        paging: true,
        sorting: { columns: this.columnsTurniTable },
        filtering: { filterString: '' },
    };

    ngAfterViewInit(): void {
        this.componentService.setMiddleComponent('currentSearchTable', this);

        // Partenza automatica della ricerca sinottico con i parametri di dafault
        let currentFilter = sessionStorage.getItem("turnFilter");
        let filterDefault: OverviewTurnFilterDTO;
        if (currentFilter) {
            filterDefault = JSON.parse(currentFilter);
            this.filterToSave = filterDefault;
            //converto la lista daysStruct in days
            /*if (this.filterToSave.daysStruct && this.filterToSave.daysStruct.length>0){
                var listTemp = [];
                for (var i = 0; i < this.filterToSave.daysStruct.length; i++) {
                    listTemp[i] = this.filterToSave.daysStruct[i].id;
                }
                this.filterToSave.days = listTemp;
            }*/
            this.updateFilterSet();
        } else {
            //filterDefault = { initTurnDate: new Date(this.initDateToSet['year'], this.initDateToSet['month'] - 1, this.initDateToSet['day']) };
            filterDefault = {initTurnDate:convertToDate(this.today, "")}
        }
        setTimeout(() => this.triggerSubmit(filterDefault), 100);

        this.collapseSubscription = this.componentService.getRootComponent().collapseMenu.subscribe(e => {
        });


    }

    //metodo che costruisce la stringa che mostra i filtri impostati
    updateFilterSet(): void {
        this.filterSet = "";
       
        if (this.filterToSave.initTurnDate != null) {
            let m = moment(this.filterToSave.initTurnDate);
            let formatDate = m.format('DD-MM-YYYY');
            this.filterSet += "DATA INIZIO TURNO:" + formatDate + "; ";
        }
        if (this.filterToSave.initTurnTime) {
            this.filterSet += "ORARIO:" + this.filterToSave.initTurnTime + "; ";
        }
        if (this.filterToSave.vehicleCode) {
            this.filterSet += "MEZZO:" + this.filterToSave.vehicleCode + "; ";
        }
        if (this.filterToSave.parkingCode) {
            this.filterSet += "POSTAZIONE:" + this.filterToSave.parkingCode + "; ";
        }
       
        this.filterSet.trim;
    }

    ngAfterViewChecked() {
        //console.log('ngAfterViewChecked');
    }

    ngAfterContentChecked() {
        //console.log('ngAfterContentChecked');
    }

    //vado alla gui per modificare i dati della ciclica
    /*public async modifyCiclical(ciclical: CiclicalDTO) {
        //se la ciclica è stata sospesa non posso modificare i suoi dati
        if (ciclical.status && ciclical.status=='UN'){
            var message = 'Questa prenotazione ciclica è stata sospesa. \n E\' possibile apportare modifiche solo riattivandola.';
            this.componentService.getRootComponent().showModal('Attenzione', message);
        }else {
            this.router.navigate(['/modifica-cicliche', ciclical.id]);               
        }
    }

    //vado alla gui per la duplicazione della prenotazione
    public async duplicateSingleBooking(ciclical: CiclicalDTO) {    
        //carico il booking relativo alla ciclica selezionata
        this.bookingService.getBookingByCode(ciclical.ciclicalBooking.code).catch((e, o) => {
            return [];
        }).subscribe(res => {
            //passare il parametro per indicare che sto facendo una duplicazione
            this.router.navigate(['/modifica-prenotazione', '3', res.id],{queryParams:{ isDuplicate: true}});
        });   
    }

    //vado alla gui per visualizzare/modificare i dati della prenotazione
    public async goToPrenotazioneInfo(ciclical: CiclicalDTO) {
        //carico il booking relativo alla ciclia selezionata
        this.bookingService.getBookingByCode(ciclical.ciclicalBooking.code).catch((e, o) => {
            return [];
        }).subscribe(res => {
            this.router.navigate(['/modifica-prenotazione', '3', res.id]);
        });
        
    }*/

    public selectTurn(ev: TurnDTO) {
        this.turnSelected = ev;
    }

    public clearSelected() {
        this.turnSelected = null;
    }

    //rimozione del turno
    public async removeTurn(turn: TurnDTO) {
        let turnToDelete = {
            parkingVehicleTurnId: this.turnSelected.id
        };

        this.componentService.getRootComponent().showConfirmDialog('Attenzione!',
                "Sei sicuro di voler eliminare il turno selezionato?").then((result) => {
                    this.componentService.getRootComponent().mask();
                    this.turniService.removeTurn(turnToDelete).catch((e, o) => {
                        this.componentService.getRootComponent().unmask();
                        return [];
                    }).subscribe(res => {
                        this.componentService.getRootComponent().unmask();
                        this.componentService.getRootComponent().showToastMessage('success', "Eliminazione del turno avvenuto con successo");
                        this.loadTurni(); 
                    });
                }, (reason) => {
                    console.log("Eliminazione del turno non effettuato ");
                    this.componentService.getRootComponent().unmask();
                    return;
                });   
    }

    //mette/toglie  del turno
    public async changePauseTurn(turn: TurnDTO) {
        let turnToPause = {
            parkingVehicleTurnId: this.turnSelected.id
        };
        //se ho l'integrazone attiva con il 118 e la configurazione della pausa del turno attiva
        if (this.vehicleTurnPause && this.integration118web) {
            //se il turno non è in pausa, apro la maschera
            if (!this.turnSelected.pause){
                //apro la maschera per inserire i dati per mettere/togliere in pausa del turno (codice, tempo e note)
                let modal = this.modalService.open(TurnModalComponent, { size: 'lg' });
                modal.componentInstance.pause = true;
                modal.componentInstance.standby = false;
                modal.componentInstance.parkingVehicleTurnId = this.turnSelected.id;
                modal.result.then((result) => {
                    this.loadTurni(); 
                }, (reason) => {
                });
            } else {
                //invoco il servizio per togliere la pausa
                let body: TurnRequestDTO = {
                    parkingVehicleTurnId: this.turnSelected.id
                };
                this.componentService.getRootComponent().mask();
                    this.turniService.changePause(body).catch((e, o) => {
                        this.componentService.getRootComponent().unmask();
                        return [];
                    }).subscribe(res => {
                        this.componentService.getRootComponent().unmask();
                        this.loadTurni(); 
                    });
            }
        }
    }

    //sospensione/riattivazione del turno
    public async changeAvailabilityTurn(turn: TurnDTO) {
        let turnToPause = {
            parkingVehicleTurnId: this.turnSelected.id
        };
        //se ho l'integrazone attiva con il 118 e la configurazione della pausa del turno attiva
        if (this.vehicleTurnPause && this.integration118web){
            //se il turno è disponibile, apro la maschera
            if (this.turnSelected.availability){
                //apro la maschera per inserire i dati per mettere/togliere in pausa del turno (codice, tempo e note)
                let modal = this.modalService.open(TurnModalComponent, { size: 'lg' });
                modal.componentInstance.pause = false;
                modal.componentInstance.standby = true;
                modal.componentInstance.parkingVehicleTurnId = this.turnSelected.id;
                modal.result.then((result) => {
                    this.loadTurni(); 
                }, (reason) => {
                });
            } else {
                //invoco il servizio per riattivarlo
                let body: TurnRequestDTO = {
                    parkingVehicleTurnId: this.turnSelected.id
                };
                this.componentService.getRootComponent().mask();
                    this.turniService.changeAvailability(body).catch((e, o) => {
                        this.componentService.getRootComponent().unmask();
                        return [];
                    }).subscribe(res => {
                        this.componentService.getRootComponent().unmask();
                        this.loadTurni(); 
                    });
            }
        }
    }


    //elaboro il messaggio che ho ricevuto della topic al quale mi sono sottoscritta
    private elaboratePushMessage(msg) {
        if (msg.data.payload && msg.data.action) {
            //se l'operazione è stata effettuata da un altro utente
            if (!this.currentUser || !msg.data.from || (msg.data.from != this.currentUser)){
                //ricarico il sinottico
                this.loadTurni();
            }
        }
    }

    //sospensione/attivazione della ciclica
    /*public async suspendResumeCiclical(ciclical: CiclicalDTO) {
        let ciclicalToCheck = {
            ciclicalId: this.ciclicalSelected.id
        };
        this.componentService.getRootComponent().mask();
        //controllo se la ciclica è sospendibile/attivabile
        this.ciclicheService.checkSuspendCiclical(ciclicalToCheck).catch((o, t) => {
            this.componentService.getRootComponent().unmask();
            return [];
        }).subscribe(res => {
            this.componentService.getRootComponent().unmask();
            if (!res.checkSuspendCiclicalResult){
                if (res.checkSuspendCiclicalMessage){
                    this.componentService.getRootComponent().showConfirmDialog('Attenzione!',
                    res.checkSuspendCiclicalMessage).then((result) => {
                        this.componentService.getRootComponent().mask();
                        this.ciclicheService.suspendResumeCiclical(ciclicalToCheck).catch((e, o) => {
                            this.componentService.getRootComponent().unmask();
                            return [];
                        }).subscribe(res => {
                            this.componentService.getRootComponent().unmask();
                            this.componentService.getRootComponent().showToastMessage('success', "Sospensione/Attivazione della prenotazione ciclica avvenuta con successo");
                            this.loadCicliche(); 
                        });
                    }, (reason) => {
                        console.log("Sospensione/Attivazione della prenotazione ciclica non effettuata");
                        this.componentService.getRootComponent().unmask();
                        return;
                    });
                }
            }else {
                this.componentService.getRootComponent().mask();
                this.ciclicheService.suspendResumeCiclical(ciclicalToCheck).catch((e, o) => {
                    this.componentService.getRootComponent().unmask();
                    return [];
                }).subscribe(res => {
                    this.componentService.getRootComponent().unmask();
                    this.componentService.getRootComponent().showToastMessage('success', "Sospensione/Attivazione della prenotazione ciclica avvenuta con successo");
                    this.loadCicliche(); 
                });
            }
        });
        
    }

    //vado alla gui per modificare i dati strutturali della ciclica
    public async modifyCiclicalPeriod(ciclical: CiclicalDTO) {       
        this.router.navigate(['/intervallo-cicliche', this.ciclicalSelected.bookingId],{queryParams:{ ciclicalId: this.ciclicalSelected.id}});
        return;
        
    }*/

    isEmptyFilter(filter: OverviewTurnFilterDTO): boolean {
        var empty = true;
        if (filter.initTurnDate || filter.parkingCode || filter.vehicleCode || filter.vehicleId || filter.conventionId
            ||filter.conventionCode|| filter.sanitaryCategoryId||filter.sanitaryCategoryCode){
            return false;
        }
        return empty;
    }

    //trigger che scatta prima della ricerca
    triggerSubmit(filterInput: any) {
        if (filterInput != null) {
            //se non ho impostato criteri di ricerca, message
            if (!this.isEmptyFilter(filterInput)){
                this.filter = filterInput;
                sessionStorage.setItem("turnFilter", JSON.stringify(this.filter));
                this.filterToSave = JSON.parse(JSON.stringify(this.filter));
                /*if (filterInput.transportDate != null) {
                    this.filterToSave.transportDate = new Date(filterInput.transportDate['year'], filterInput.transportDate['month'] - 1, filterInput.transportDate['day']);
                }
                if (filterInput.fromDate != null) {
                    this.filterToSave.fromDate = new Date(filterInput.fromDate['year'], filterInput.fromDate['month'] - 1, filterInput.fromDate['day']);
                }
                if (filterInput.toDate != null) {
                    this.filterToSave.toDate = new Date(filterInput.toDate['year'], filterInput.toDate['month'] - 1, filterInput.toDate['day']);
                }
                if (!filterInput.days || filterInput.days.length==0){
                    //converto la lista daysStruct(oggetti) in days(stringhe), da passare al server
                    if (filterInput.daysStruct && filterInput.daysStruct.length>0){
                        var listTemp = [];
                        for (var i = 0; i < filterInput.daysStruct.length; i++) {
                            listTemp[i] = filterInput.daysStruct[i].id;
                        }
                        this.filterToSave.days = listTemp;
                    }
                }*/
                //caricamento dei turni
                this.loadTurni();
            }else {
                var message = 'Impostare almeno un criterio di ricerca';
                this.componentService.getRootComponent().showModal('Attenzione', message);     
            }
        }else {
            var message = 'Impostare almeno un criterio di ricerca';
            this.componentService.getRootComponent().showModal('Attenzione', message);
        }
    }

  
    //ricerca delle cicliche in base ai filtri impostati
    public loadTurni() {
        this.updateFilterSet();
        this.componentService.getRootComponent().mask();
        this.turniService.searchTurnByFilter(this.filterToSave).catch((e, o) => {
            this.componentService.getRootComponent().unmask();
            return [];
        })
            .subscribe(res => {
                let tempListTurni: Array<TurnExtDTO> = res.resultList;
                let index = 0;
                for (index = 0; index < tempListTurni.length; index++) {
                   // tempListTurni[index].availabilityString = this.getAvailabilityIcon(tempListTurni[index].availability);
                    tempListTurni[index].startTurnDateString = this.formatDate(tempListTurni[index].startTurnDate, 'DD/MM/YY HH:mm:SS');
                    tempListTurni[index].endTurnDateString = this.formatDate(tempListTurni[index].endTurnDate, 'DD/MM/YY HH:mm:SS');
                }
                this.listTurni = tempListTurni;
                this.componentService.getRootComponent().unmask();
            });
    }

    public formatDate(date: Date, format: string) {
        if (date == null) {
            return '';
        }
        return moment(date).format(format);
    }

    //metodo che calcola l'icona per il campo availability della griglia
    public getAvailabilityIcon(availability: boolean) {
        let image: string;
       if (availability && availability==true){           
            image = 'fa fa-check icon-green';
        }else {
            image = 'fa fa-ban icon-red';
        }
       
        return image;
    }

    //metodo che calcola l'icona per il campo pause della griglia
    public getPauseIcon(pause: boolean) {
        let image: string;
       if (pause && pause==true){  
            image = 'fa fa-ban icon-red';
        }else {
            image = 'fa fa-check icon-green';
        }
       
        return image;
    }

    @throttleable(5)
    public onPanelChange(event) {

    }

}

interface TurnExtDTO extends TurnDTO {
    startTurnDateString: string;
    endTurnDateString: string;
   // availabilityString: string;
   // pauseString: string;
}

