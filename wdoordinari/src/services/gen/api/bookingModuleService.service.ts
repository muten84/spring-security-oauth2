/**
 * Swagger Maven Plugin Sample
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AdvancedBookingSearchFilterDTO } from '../model/advancedBookingSearchFilterDTO';
import { AdvancedSearchBookingResultDTO } from '../model/advancedSearchBookingResultDTO';
import { BookingDTO } from '../model/bookingDTO';
import { BookingDiscardDTO } from '../model/bookingDiscardDTO';
import { BookingDuplicateListDTO } from '../model/bookingDuplicateListDTO';
import { BookingDuplicateSearchDTO } from '../model/bookingDuplicateSearchDTO';
import { BookingHistoryDTO } from '../model/bookingHistoryDTO';
import { DeletedBookingReasonDTO } from '../model/deletedBookingReasonDTO';
import { ErrorMessage } from '../model/errorMessage';
import { GenericMessageDTO } from '../model/genericMessageDTO';
import { GenericResultDTO } from '../model/genericResultDTO';
import { OverviewBookingDTO } from '../model/overviewBookingDTO';
import { OverviewBookingFilterDTO } from '../model/overviewBookingFilterDTO';
import { PrintBookingDTO } from '../model/printBookingDTO';
import { PrintBookingFilterDTO } from '../model/printBookingFilterDTO';
import { SearchBookingResultDTO } from '../model/searchBookingResultDTO';
import { SwitchBookingReturnDTO } from '../model/switchBookingReturnDTO';
import { SwitchBookingReturnResultDTO } from '../model/switchBookingReturnResultDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BookingModuleServiceService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * discardBooking
     * Permette di cancellare il trasporto passato in input
     * @param bookingDiscardDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public discardBooking(bookingDiscardDTO?: BookingDiscardDTO, observe?: 'body', reportProgress?: boolean): Observable<GenericResultDTO>;
    public discardBooking(bookingDiscardDTO?: BookingDiscardDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResultDTO>>;
    public discardBooking(bookingDiscardDTO?: BookingDiscardDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResultDTO>>;
    public discardBooking(bookingDiscardDTO?: BookingDiscardDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<GenericResultDTO>(`${this.basePath}/api/secure/rest/booking/discardBooking`,
            bookingDiscardDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * duplicateBookingByDate
     * Permette di duplicare il trasporto passato in input
     * @param bookingDuplicateListDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public duplicateBooking(bookingDuplicateListDTO?: BookingDuplicateListDTO, observe?: 'body', reportProgress?: boolean): Observable<GenericResultDTO>;
    public duplicateBooking(bookingDuplicateListDTO?: BookingDuplicateListDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResultDTO>>;
    public duplicateBooking(bookingDuplicateListDTO?: BookingDuplicateListDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResultDTO>>;
    public duplicateBooking(bookingDuplicateListDTO?: BookingDuplicateListDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<GenericResultDTO>(`${this.basePath}/api/secure/rest/booking/duplicateBooking`,
            bookingDuplicateListDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getBookingByCode
     * Restituisce il booking individuato dal code in imput
     * @param code 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBookingByCode(code: string, observe?: 'body', reportProgress?: boolean): Observable<BookingDTO>;
    public getBookingByCode(code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BookingDTO>>;
    public getBookingByCode(code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BookingDTO>>;
    public getBookingByCode(code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling getBookingByCode.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (code !== undefined && code !== null) {
            queryParameters = queryParameters.set('code', <any>code);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<BookingDTO>(`${this.basePath}/api/secure/rest/booking/getBookingByCode`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getBookingById
     * Restituisce il booking individuato dall&#39;id in imput
     * @param id 
     * @param source 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBookingById(id: string, source?: string, observe?: 'body', reportProgress?: boolean): Observable<GenericResultDTO>;
    public getBookingById(id: string, source?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResultDTO>>;
    public getBookingById(id: string, source?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResultDTO>>;
    public getBookingById(id: string, source?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getBookingById.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (source !== undefined && source !== null) {
            queryParameters = queryParameters.set('source', <any>source);
        }
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<GenericResultDTO>(`${this.basePath}/api/secure/rest/booking/getBookingById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getBookingHistoryById
     * Restituisce lo storico delle modifiche del booking con l&#39;id in imput
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBookingHistoryById(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<BookingHistoryDTO>>;
    public getBookingHistoryById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<BookingHistoryDTO>>>;
    public getBookingHistoryById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<BookingHistoryDTO>>>;
    public getBookingHistoryById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getBookingHistoryById.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<BookingHistoryDTO>>(`${this.basePath}/api/secure/rest/booking/getBookingHistory`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getDiscardBookingReasonList
     * Restituisce la lista delle possibili motivazioni per la cancellazione di un booking
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDiscardBookingReasonList(observe?: 'body', reportProgress?: boolean): Observable<Array<DeletedBookingReasonDTO>>;
    public getDiscardBookingReasonList(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DeletedBookingReasonDTO>>>;
    public getDiscardBookingReasonList(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DeletedBookingReasonDTO>>>;
    public getDiscardBookingReasonList(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<DeletedBookingReasonDTO>>(`${this.basePath}/api/secure/rest/booking/getDiscardBookingReasonList`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getDuplicateBooking
     * Permette di cercare le prenotazioni duplicate rispetto a quella in input. Il flag visualizeAll a true esclude la data di prenotazione come elemento di confronto
     * @param bookingDuplicateSearchDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDuplicateBooking(bookingDuplicateSearchDTO?: BookingDuplicateSearchDTO, observe?: 'body', reportProgress?: boolean): Observable<GenericResultDTO>;
    public getDuplicateBooking(bookingDuplicateSearchDTO?: BookingDuplicateSearchDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResultDTO>>;
    public getDuplicateBooking(bookingDuplicateSearchDTO?: BookingDuplicateSearchDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResultDTO>>;
    public getDuplicateBooking(bookingDuplicateSearchDTO?: BookingDuplicateSearchDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<GenericResultDTO>(`${this.basePath}/api/secure/rest/booking/getDuplicateBooking`,
            bookingDuplicateSearchDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPdf
     * You can know id using the DocumentServiceResource
     * @param code 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPdf(code: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getPdf(code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getPdf(code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getPdf(code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling getPdf.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (code !== undefined && code !== null) {
            queryParameters = queryParameters.set('code', <any>code);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/pdf'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/api/secure/rest/booking/getpdf`,
            {
                params: queryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getServicePdf
     * You can know id using the DocumentServiceResource
     * @param code 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getServicePdf(code: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getServicePdf(code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getServicePdf(code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getServicePdf(code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling getServicePdf.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (code !== undefined && code !== null) {
            queryParameters = queryParameters.set('code', <any>code);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/pdf'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/api/secure/rest/booking/getservicepdf`,
            {
                params: queryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * ultimePrenotazioni
     * Restituisce la lista delle ultime premotazioni
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUltimePrenotazioni(observe?: 'body', reportProgress?: boolean): Observable<Array<OverviewBookingDTO>>;
    public getUltimePrenotazioni(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OverviewBookingDTO>>>;
    public getUltimePrenotazioni(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OverviewBookingDTO>>>;
    public getUltimePrenotazioni(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<OverviewBookingDTO>>(`${this.basePath}/api/secure/rest/booking/ultimePrenotazioni`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveUpdateBooking
     * Permette di inserire o aggiornare il trasporto in input
     * @param bookingDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveBooking(bookingDTO?: BookingDTO, observe?: 'body', reportProgress?: boolean): Observable<GenericResultDTO>;
    public saveBooking(bookingDTO?: BookingDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResultDTO>>;
    public saveBooking(bookingDTO?: BookingDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResultDTO>>;
    public saveBooking(bookingDTO?: BookingDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<GenericResultDTO>(`${this.basePath}/api/secure/rest/booking/saveUpdateBooking`,
            bookingDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchAdvancedBookingByFilter
     * Permette di cercare le prenotazioni dei trasporti con i filtri (avanzati) passati in input
     * @param advancedBookingSearchFilterDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchAdvancedBooking(advancedBookingSearchFilterDTO?: AdvancedBookingSearchFilterDTO, observe?: 'body', reportProgress?: boolean): Observable<AdvancedSearchBookingResultDTO>;
    public searchAdvancedBooking(advancedBookingSearchFilterDTO?: AdvancedBookingSearchFilterDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AdvancedSearchBookingResultDTO>>;
    public searchAdvancedBooking(advancedBookingSearchFilterDTO?: AdvancedBookingSearchFilterDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AdvancedSearchBookingResultDTO>>;
    public searchAdvancedBooking(advancedBookingSearchFilterDTO?: AdvancedBookingSearchFilterDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<AdvancedSearchBookingResultDTO>(`${this.basePath}/api/secure/rest/booking/searchAdvancedBooking`,
            advancedBookingSearchFilterDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchBookingByFilter
     * Permette di cercare le prenotazioni dei trasporti con i filtri passati in input
     * @param overviewBookingFilterDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchBookingByFilter(overviewBookingFilterDTO?: OverviewBookingFilterDTO, observe?: 'body', reportProgress?: boolean): Observable<SearchBookingResultDTO>;
    public searchBookingByFilter(overviewBookingFilterDTO?: OverviewBookingFilterDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SearchBookingResultDTO>>;
    public searchBookingByFilter(overviewBookingFilterDTO?: OverviewBookingFilterDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SearchBookingResultDTO>>;
    public searchBookingByFilter(overviewBookingFilterDTO?: OverviewBookingFilterDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SearchBookingResultDTO>(`${this.basePath}/api/secure/rest/booking/searchBooking`,
            overviewBookingFilterDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchPrintBooking
     * Report booking in base filtri passati in input
     * @param printBookingFilterDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchPrintBooking(printBookingFilterDTO?: PrintBookingFilterDTO, observe?: 'body', reportProgress?: boolean): Observable<Array<PrintBookingDTO>>;
    public searchPrintBooking(printBookingFilterDTO?: PrintBookingFilterDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PrintBookingDTO>>>;
    public searchPrintBooking(printBookingFilterDTO?: PrintBookingFilterDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PrintBookingDTO>>>;
    public searchPrintBooking(printBookingFilterDTO?: PrintBookingFilterDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<PrintBookingDTO>>(`${this.basePath}/api/secure/rest/booking/searchPrintBooking`,
            printBookingFilterDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * switchBookingReturn
     * Porta un ritorno nella coda delle pronotazioni
     * @param switchBookingReturnDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public switchBookingReturn(switchBookingReturnDTO?: SwitchBookingReturnDTO, observe?: 'body', reportProgress?: boolean): Observable<SwitchBookingReturnResultDTO>;
    public switchBookingReturn(switchBookingReturnDTO?: SwitchBookingReturnDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SwitchBookingReturnResultDTO>>;
    public switchBookingReturn(switchBookingReturnDTO?: SwitchBookingReturnDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SwitchBookingReturnResultDTO>>;
    public switchBookingReturn(switchBookingReturnDTO?: SwitchBookingReturnDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SwitchBookingReturnResultDTO>(`${this.basePath}/api/secure/rest/booking/switchBookingReturn`,
            switchBookingReturnDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
